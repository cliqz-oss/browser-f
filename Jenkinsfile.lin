#!/usr/bin/env groovy

/*
 TRIGGERING JOB

  ```groovy
node(LINUX_BUILD_NODE) {
    step([
        $class: 'CopyArtifact',
        projectName: TRIGGERING_JOB_NAME,
        selector: [$class: 'SpecificBuildSelector', buildNumber: TRIGGERING_BUILD_NUMBER],
        target: 'artifacts'
    ])
    def helpers = load "artifacts/build-helpers.groovy"

    stage('Checkout') {
      helpers.checkoutSCM(REPO_URL, COMMIT_ID)
    }
    load ENTRY_POINT
  }
}
  ```

*/

def imageName = 'browser-f'

try {
  // authorize docker deamon to access registry
  sh "`aws ecr get-login --region=$AWS_REGION`"

  docker.withRegistry(DOCKER_REGISTRY_URL) {
    def image = docker.image(imageName)
    image.pull()
    imageName = image.imageName()
  }
} catch (e) {
  // local registry does not require auth
}

docker.image(imageName).inside() {
  stage('Update Dependencies') {
    // Install any missing dependencies. Try to rebuild base image from time to time to speed up this process
    sh 'python mozilla-release/python/mozboot/bin/bootstrap.py --application-choice=browser --no-interactive'
  }

  withEnv([
      "CQZ_BUILD_ID=$CQZ_BUILD_ID",
      "CQZ_COMMIT=$COMMIT_ID",
      "CQZ_RELEASE_CHANNEL=$CQZ_RELEASE_CHANNEL",
      "CQZ_BUILD_DE_LOCALIZATION=$CQZ_BUILD_DE_LOCALIZATION"]) {

    stage('Build Browser') {
      withCredentials([
          [$class: 'StringBinding', credentialsId: CQZ_GOOGLE_API_KEY_CREDENTIAL_ID, variable: 'CQZ_GOOGLE_API_KEY'],
          [$class: 'StringBinding', credentialsId: CQZ_MOZILLA_API_KEY_CREDENTIAL_ID, variable: 'MOZ_MOZILLA_API_KEY']]) {

        try {
          sh './magic_build_and_package.sh  --clobber'
        } catch (e) {
          archive 'obj/config.log'
          throw e
        }
      }
    }

    withCredentials([[
        $class: 'UsernamePasswordMultiBinding',
        credentialsId: CQZ_AWS_CREDENTIAL_ID,
        passwordVariable: 'AWS_SECRET_ACCESS_KEY',
        usernameVariable: 'AWS_ACCESS_KEY_ID']]) {

      stage('Publisher (Debian Repo)') {
        try {
          withCredentials([
              [$class: 'FileBinding', credentialsId: DEBIAN_GPG_KEY_CREDENTIAL_ID, variable: 'DEBIAN_GPG_KEY'],
              [$class: 'StringBinding', credentialsId: DEBIAN_GPG_PASS_CREDENTIAL_ID, variable: 'DEBIAN_GPG_PASS']]) {

            sh 'echo $DEBIAN_GPG_PASS > debian.gpg.pass'

              withEnv([
                  "CQZ_S3_DEBIAN_REPOSITORY_URL=$CQZ_S3_DEBIAN_REPOSITORY_URL"]) {

                sh './sign_lin.sh'
              }
          }
        } finally {
          sh 'rm -rf debian.gpg.pass'
        }
      }

      stage('Publisher (Internal)') {
        sh './magic_upload_files.sh'
          archiveArtifacts 'obj/build_properties.json'
      }
    }
  }
}
