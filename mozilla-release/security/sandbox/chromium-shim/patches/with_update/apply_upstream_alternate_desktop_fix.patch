# HG changeset patch
# User Alex Gaynor <agaynor@mozilla.com>
# Date 1504297684 0
#      Fri Sep 01 20:28:04 2017 +0000
# Node ID b96cc614adbd07273d66e1a5725dded8a3583c47
# Parent  0f11c5ecbaefbe66f9236a93090e8fb4a61cd37b
[PATCH] Correct two bugs in Windows sandboxing alternate desktops:
From db4c64b63d6098294ed255e962700fd2d465575e Mon Sep 17 00:00:00 2001
When a parent has two alternate desktops, one on a local winstation, the
other on an alternate winstation:

1) Ensure the desktops have different names.
2) Ensure both desktops have their integrity level set correctly.

Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1229829#c11
Cq-Include-Trybots: master.tryserver.chromium.win:win10_chromium_x64_rel_ng
Change-Id: I2d17779e389c9f74146a83d97d62babffa903184
Reviewed-on: https://chromium-review.googlesource.com/638872
Reviewed-by: Will Harris <wfh@chromium.org>
Commit-Queue: Will Harris <wfh@chromium.org>
Cr-Commit-Position: refs/heads/master@{#499280}
---

diff --git a/security/sandbox/chromium/sandbox/win/src/policy_target_test.cc b/security/sandbox/chromium/sandbox/win/src/policy_target_test.cc
--- a/security/sandbox/chromium/sandbox/win/src/policy_target_test.cc
+++ b/security/sandbox/chromium/sandbox/win/src/policy_target_test.cc
@@ -373,16 +373,26 @@ TEST(PolicyTargetTest, BothLocalAndAlter
   ResultCode result;
   result = policy1->SetAlternateDesktop(false);
   EXPECT_EQ(SBOX_ALL_OK, result);
   result = policy2->SetAlternateDesktop(true);
   EXPECT_EQ(SBOX_ALL_OK, result);
   result = policy3->SetAlternateDesktop(false);
   EXPECT_EQ(SBOX_ALL_OK, result);
 
+  base::string16 policy1_desktop_name = policy1->GetAlternateDesktop();
+  base::string16 policy2_desktop_name = policy2->GetAlternateDesktop();
+
+  // Extract only the "desktop name" portion of
+  // "{winstation name}\\{desktop name}"
+  EXPECT_NE(policy1_desktop_name.substr(
+                policy1_desktop_name.find_first_of(L'\\') + 1),
+            policy2_desktop_name.substr(
+                policy2_desktop_name.find_first_of(L'\\') + 1));
+
   policy1->DestroyAlternateDesktop();
   policy2->DestroyAlternateDesktop();
   policy3->DestroyAlternateDesktop();
 }
 
 // Launches the app in the sandbox and share a handle with it. The app should
 // be able to use the handle.
 TEST(PolicyTargetTest, ShareHandleTest) {
diff --git a/security/sandbox/chromium/sandbox/win/src/sandbox_policy_base.cc b/security/sandbox/chromium/sandbox/win/src/sandbox_policy_base.cc
--- a/security/sandbox/chromium/sandbox/win/src/sandbox_policy_base.cc
+++ b/security/sandbox/chromium/sandbox/win/src/sandbox_policy_base.cc
@@ -111,16 +111,19 @@ SANDBOX_INTERCEPT MitigationFlags g_shar
 // Initializes static members. alternate_desktop_handle_ is a desktop on
 // alternate_winstation_handle_, alternate_desktop_local_winstation_handle_ is a
 // desktop on the same winstation as the parent process.
 HWINSTA PolicyBase::alternate_winstation_handle_ = nullptr;
 HDESK PolicyBase::alternate_desktop_handle_ = nullptr;
 HDESK PolicyBase::alternate_desktop_local_winstation_handle_ = nullptr;
 IntegrityLevel PolicyBase::alternate_desktop_integrity_level_label_ =
     INTEGRITY_LEVEL_SYSTEM;
+IntegrityLevel
+    PolicyBase::alternate_desktop_local_winstation_integrity_level_label_ =
+        INTEGRITY_LEVEL_SYSTEM;
 
 PolicyBase::PolicyBase()
     : ref_count(1),
       lockdown_level_(USER_LOCKDOWN),
       initial_level_(USER_LOCKDOWN),
       job_level_(JOB_LOCKDOWN),
       ui_exceptions_(0),
       memory_limit_(0),
@@ -442,36 +445,44 @@ ResultCode PolicyBase::MakeTokens(base::
                             lockdown_default_dacl_, lockdown);
   if (ERROR_SUCCESS != result)
     return SBOX_ERROR_GENERIC;
 
   // If we're launching on the alternate desktop we need to make sure the
   // integrity label on the object is no higher than the sandboxed process's
   // integrity level. So, we lower the label on the desktop process if it's
   // not already low enough for our process.
-  if (use_alternate_desktop_ && integrity_level_ != INTEGRITY_LEVEL_LAST &&
-      alternate_desktop_integrity_level_label_ < integrity_level_) {
+  if (use_alternate_desktop_ && integrity_level_ != INTEGRITY_LEVEL_LAST) {
     // Integrity label enum is reversed (higher level is a lower value).
     static_assert(INTEGRITY_LEVEL_SYSTEM < INTEGRITY_LEVEL_UNTRUSTED,
                   "Integrity level ordering reversed.");
     HDESK desktop_handle = nullptr;
+    IntegrityLevel desktop_integrity_level_label;
     if (use_alternate_winstation_) {
       desktop_handle = alternate_desktop_handle_;
+      desktop_integrity_level_label = alternate_desktop_integrity_level_label_;
     } else {
       desktop_handle = alternate_desktop_local_winstation_handle_;
+      desktop_integrity_level_label =
+          alternate_desktop_local_winstation_integrity_level_label_;
     }
     // If the desktop_handle hasn't been created for any reason, skip this.
-    if (desktop_handle) {
+    if (desktop_handle && desktop_integrity_level_label < integrity_level_) {
       result =
           SetObjectIntegrityLabel(desktop_handle, SE_WINDOW_OBJECT, L"",
                                   GetIntegrityLevelString(integrity_level_));
       if (ERROR_SUCCESS != result)
         return SBOX_ERROR_GENERIC;
 
-      alternate_desktop_integrity_level_label_ = integrity_level_;
+      if (use_alternate_winstation_) {
+        alternate_desktop_integrity_level_label_ = integrity_level_;
+      } else {
+        alternate_desktop_local_winstation_integrity_level_label_ =
+            integrity_level_;
+      }
     }
   }
 
   if (lowbox_sid_) {
     NtCreateLowBoxToken CreateLowBoxToken = NULL;
     ResolveNTFunctionPtr("NtCreateLowBoxToken", &CreateLowBoxToken);
     OBJECT_ATTRIBUTES obj_attr;
     InitializeObjectAttributes(&obj_attr, NULL, 0, NULL, NULL);
diff --git a/security/sandbox/chromium/sandbox/win/src/sandbox_policy_base.h b/security/sandbox/chromium/sandbox/win/src/sandbox_policy_base.h
--- a/security/sandbox/chromium/sandbox/win/src/sandbox_policy_base.h
+++ b/security/sandbox/chromium/sandbox/win/src/sandbox_policy_base.h
@@ -157,16 +157,18 @@ class PolicyBase final : public TargetPo
   base::win::ScopedHandle lowbox_directory_;
   std::unique_ptr<Dispatcher> dispatcher_;
   bool lockdown_default_dacl_;
 
   static HDESK alternate_desktop_handle_;
   static HWINSTA alternate_winstation_handle_;
   static HDESK alternate_desktop_local_winstation_handle_;
   static IntegrityLevel alternate_desktop_integrity_level_label_;
+  static IntegrityLevel
+      alternate_desktop_local_winstation_integrity_level_label_;
 
   // Contains the list of handles being shared with the target process.
   // This list contains handles other than the stderr/stdout handles which are
   // shared with the target at times.
   base::HandlesToInheritVector handles_to_share_;
   bool enable_opm_redirection_;
 
   DISALLOW_COPY_AND_ASSIGN(PolicyBase);
diff --git a/security/sandbox/chromium/sandbox/win/src/window.cc b/security/sandbox/chromium/sandbox/win/src/window.cc
--- a/security/sandbox/chromium/sandbox/win/src/window.cc
+++ b/security/sandbox/chromium/sandbox/win/src/window.cc
@@ -26,17 +26,17 @@ bool GetSecurityAttributes(HANDLE handle
                                    DACL_SECURITY_INFORMATION, NULL, NULL, &dacl,
                                    NULL, &attributes->lpSecurityDescriptor);
   if (ERROR_SUCCESS == result)
     return true;
 
   return false;
 }
 
-}
+}  // namespace
 
 namespace sandbox {
 
 ResultCode CreateAltWindowStation(HWINSTA* winsta) {
   // Get the security attributes from the current window station; we will
   // use this as the base security attributes for the new window station.
   HWINSTA current_winsta = ::GetProcessWindowStation();
   if (!current_winsta)
@@ -60,16 +60,20 @@ ResultCode CreateAltWindowStation(HWINST
     return SBOX_ALL_OK;
 
   return SBOX_ERROR_CANNOT_CREATE_WINSTATION;
 }
 
 ResultCode CreateAltDesktop(HWINSTA winsta, HDESK* desktop) {
   base::string16 desktop_name = L"sbox_alternate_desktop_";
 
+  if (!winsta) {
+    desktop_name += L"local_winstation_";
+  }
+
   // Append the current PID to the desktop name.
   wchar_t buffer[16];
   _snwprintf_s(buffer, sizeof(buffer) / sizeof(wchar_t), L"0x%X",
                ::GetCurrentProcessId());
   desktop_name += buffer;
 
   HDESK current_desktop = GetThreadDesktop(GetCurrentThreadId());
