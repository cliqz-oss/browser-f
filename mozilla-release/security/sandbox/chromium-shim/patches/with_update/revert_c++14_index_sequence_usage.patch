# HG changeset patch
# User Bob Owen <bobowencode@gmail.com>
# Date 1509027043 -3600
#      Thu Oct 26 15:10:43 2017 +0100
# Node ID 5d15fb26a11152cdd914d6c5b774a3887bcfd5c3
# Parent  67700f068215bedeadef23539fb72b951b4b0c28
Revert usage of c++14 std::index_sequence. r=jld

This basically reverts chromium commit 84956fa86786f73fa41ebf99e2f6b8d549688c91.

diff --git a/security/sandbox/chromium/base/bind.h b/security/sandbox/chromium/base/bind.h
--- a/security/sandbox/chromium/base/bind.h
+++ b/security/sandbox/chromium/base/bind.h
@@ -1,17 +1,15 @@
 // Copyright (c) 2011 The Chromium Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
 #ifndef BASE_BIND_H_
 #define BASE_BIND_H_
 
-#include <utility>
-
 #include "base/bind_internal.h"
 
 // -----------------------------------------------------------------------------
 // Usage documentation
 // -----------------------------------------------------------------------------
 //
 // See //docs/callback.md for documentation.
 //
@@ -79,17 +77,17 @@ template <typename Index,
           typename UnwrappedTypeList,
           typename ParamsList>
 struct AssertBindArgsValidity;
 
 template <size_t... Ns,
           typename... Args,
           typename... Unwrapped,
           typename... Params>
-struct AssertBindArgsValidity<std::index_sequence<Ns...>,
+struct AssertBindArgsValidity<IndexSequence<Ns...>,
                               TypeList<Args...>,
                               TypeList<Unwrapped...>,
                               TypeList<Params...>>
     : AssertConstructible<Ns, Args, typename std::decay<Args>::type, Unwrapped, Params>... {
   static constexpr bool ok = true;
 };
 
 // The implementation of TransformToUnwrappedType below.
@@ -166,17 +164,17 @@ BindOnce(Functor&& functor, Args&&... ar
   using Helper = internal::BindTypeHelper<Functor, Args...>;
   using FunctorTraits = typename Helper::FunctorTraits;
   using BoundArgsList = typename Helper::BoundArgsList;
   using UnwrappedArgsList =
       internal::MakeUnwrappedTypeList<true, FunctorTraits::is_method,
                                       Args&&...>;
   using BoundParamsList = typename Helper::BoundParamsList;
   static_assert(internal::AssertBindArgsValidity<
-                    std::make_index_sequence<Helper::num_bounds>, BoundArgsList,
+                    MakeIndexSequence<Helper::num_bounds>, BoundArgsList,
                     UnwrappedArgsList, BoundParamsList>::ok,
                 "The bound args need to be convertible to the target params.");
 
   using BindState = internal::MakeBindStateType<Functor, Args...>;
   using UnboundRunType = MakeUnboundRunType<Functor, Args...>;
   using Invoker = internal::Invoker<BindState, UnboundRunType>;
   using CallbackType = OnceCallback<UnboundRunType>;
 
@@ -207,17 +205,17 @@ BindRepeating(Functor&& functor, Args&&.
   using Helper = internal::BindTypeHelper<Functor, Args...>;
   using FunctorTraits = typename Helper::FunctorTraits;
   using BoundArgsList = typename Helper::BoundArgsList;
   using UnwrappedArgsList =
       internal::MakeUnwrappedTypeList<false, FunctorTraits::is_method,
                                       Args&&...>;
   using BoundParamsList = typename Helper::BoundParamsList;
   static_assert(internal::AssertBindArgsValidity<
-                    std::make_index_sequence<Helper::num_bounds>, BoundArgsList,
+                    MakeIndexSequence<Helper::num_bounds>, BoundArgsList,
                     UnwrappedArgsList, BoundParamsList>::ok,
                 "The bound args need to be convertible to the target params.");
 
   using BindState = internal::MakeBindStateType<Functor, Args...>;
   using UnboundRunType = MakeUnboundRunType<Functor, Args...>;
   using Invoker = internal::Invoker<BindState, UnboundRunType>;
   using CallbackType = RepeatingCallback<UnboundRunType>;
 
diff --git a/security/sandbox/chromium/base/bind_internal.h b/security/sandbox/chromium/base/bind_internal.h
--- a/security/sandbox/chromium/base/bind_internal.h
+++ b/security/sandbox/chromium/base/bind_internal.h
@@ -2,24 +2,25 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
 #ifndef BASE_BIND_INTERNAL_H_
 #define BASE_BIND_INTERNAL_H_
 
 #include <stddef.h>
 
+#include <tuple>
 #include <type_traits>
-#include <utility>
 
 #include "base/bind_helpers.h"
 #include "base/callback_internal.h"
 #include "base/memory/raw_scoped_refptr_mismatch_checker.h"
 #include "base/memory/weak_ptr.h"
 #include "base/template_util.h"
+#include "base/tuple.h"
 #include "build/build_config.h"
 
 namespace base {
 namespace internal {
 
 // See base/callback.h for user documentation.
 //
 //
@@ -313,37 +314,37 @@ struct Invoker<StorageType, R(UnboundArg
     // Local references to make debugger stepping easier. If in a debugger,
     // you really want to warp ahead and step through the
     // InvokeHelper<>::MakeItSo() call below.
     StorageType* storage = static_cast<StorageType*>(base);
     static constexpr size_t num_bound_args =
         std::tuple_size<decltype(storage->bound_args_)>::value;
     return RunImpl(std::move(storage->functor_),
                    std::move(storage->bound_args_),
-                   std::make_index_sequence<num_bound_args>(),
+                   MakeIndexSequence<num_bound_args>(),
                    std::forward<UnboundArgs>(unbound_args)...);
   }
 
   static R Run(BindStateBase* base, UnboundArgs&&... unbound_args) {
     // Local references to make debugger stepping easier. If in a debugger,
     // you really want to warp ahead and step through the
     // InvokeHelper<>::MakeItSo() call below.
     const StorageType* storage = static_cast<StorageType*>(base);
     static constexpr size_t num_bound_args =
         std::tuple_size<decltype(storage->bound_args_)>::value;
     return RunImpl(storage->functor_, storage->bound_args_,
-                   std::make_index_sequence<num_bound_args>(),
+                   MakeIndexSequence<num_bound_args>(),
                    std::forward<UnboundArgs>(unbound_args)...);
   }
 
  private:
   template <typename Functor, typename BoundArgsTuple, size_t... indices>
   static inline R RunImpl(Functor&& functor,
                           BoundArgsTuple&& bound,
-                          std::index_sequence<indices...>,
+                          IndexSequence<indices...>,
                           UnboundArgs&&... unbound_args) {
     static constexpr bool is_method = MakeFunctorTraits<Functor>::is_method;
 
     using DecayedArgsTuple = typename std::decay<BoundArgsTuple>::type;
     static constexpr bool is_weak_call =
         IsWeakMethod<is_method,
                      typename std::tuple_element<
                          indices,
@@ -396,31 +397,31 @@ typename std::enable_if<!FunctorTraits<F
 IsNull(const Functor&) {
   return false;
 }
 
 // Used by ApplyCancellationTraits below.
 template <typename Functor, typename BoundArgsTuple, size_t... indices>
 bool ApplyCancellationTraitsImpl(const Functor& functor,
                                  const BoundArgsTuple& bound_args,
-                                 std::index_sequence<indices...>) {
+                                 IndexSequence<indices...>) {
   return CallbackCancellationTraits<Functor, BoundArgsTuple>::IsCancelled(
       functor, std::get<indices>(bound_args)...);
 }
 
 // Relays |base| to corresponding CallbackCancellationTraits<>::Run(). Returns
 // true if the callback |base| represents is canceled.
 template <typename BindStateType>
 bool ApplyCancellationTraits(const BindStateBase* base) {
   const BindStateType* storage = static_cast<const BindStateType*>(base);
   static constexpr size_t num_bound_args =
       std::tuple_size<decltype(storage->bound_args_)>::value;
   return ApplyCancellationTraitsImpl(
       storage->functor_, storage->bound_args_,
-      std::make_index_sequence<num_bound_args>());
+      MakeIndexSequence<num_bound_args>());
 };
 
 // BindState<>
 //
 // This stores all the state passed into Bind().
 template <typename Functor, typename... BoundArgs>
 struct BindState final : BindStateBase {
   using IsCancellable = std::integral_constant<
diff --git a/security/sandbox/chromium/base/tuple.h b/security/sandbox/chromium/base/tuple.h
--- a/security/sandbox/chromium/base/tuple.h
+++ b/security/sandbox/chromium/base/tuple.h
@@ -22,24 +22,45 @@
 //   DispatchToMethod(&foo, &Foo::SomeMeth, std::make_tuple(1, 2, 3));
 //   // foo->SomeMeth(1, 2, 3);
 
 #ifndef BASE_TUPLE_H_
 #define BASE_TUPLE_H_
 
 #include <stddef.h>
 #include <tuple>
-#include <utility>
 
 #include "build/build_config.h"
 
 namespace base {
 
+// Index sequences
+//
+// Minimal clone of the similarly-named C++14 functionality.
+
+template <size_t...>
+struct IndexSequence {};
+
+template <size_t... Ns>
+struct MakeIndexSequenceImpl;
+
+template <size_t... Ns>
+struct MakeIndexSequenceImpl<0, Ns...> {
+  using Type = IndexSequence<Ns...>;
+};
+
+template <size_t N, size_t... Ns>
+struct MakeIndexSequenceImpl<N, Ns...>
+    : MakeIndexSequenceImpl<N - 1, N - 1, Ns...> {};
+
+template <size_t N>
+using MakeIndexSequence = typename MakeIndexSequenceImpl<N>::Type;
+
 template <typename T>
-using MakeIndexSequenceForTuple = std::make_index_sequence<
+using MakeIndexSequenceForTuple = MakeIndexSequence<
     std::tuple_size<typename std::decay<T>::type>::value>;
 
 // Dispatchers ----------------------------------------------------------------
 //
 // Helper functions that call the given method on an object, with the unpacked
 // tuple arguments.  Notice that they all have the same number of arguments,
 // so you need only write:
 //   DispatchToMethod(object, &Object::method, args);
@@ -47,34 +68,34 @@ using MakeIndexSequenceForTuple = std::m
 // what type |args| is.
 
 // Non-Static Dispatchers with no out params.
 
 template <typename ObjT, typename Method, typename Tuple, size_t... Ns>
 inline void DispatchToMethodImpl(const ObjT& obj,
                                  Method method,
                                  Tuple&& args,
-                                 std::index_sequence<Ns...>) {
+                                 IndexSequence<Ns...>) {
   (obj->*method)(std::get<Ns>(std::forward<Tuple>(args))...);
 }
 
 template <typename ObjT, typename Method, typename Tuple>
 inline void DispatchToMethod(const ObjT& obj,
                              Method method,
                              Tuple&& args) {
   DispatchToMethodImpl(obj, method, std::forward<Tuple>(args),
                        MakeIndexSequenceForTuple<Tuple>());
 }
 
 // Static Dispatchers with no out params.
 
 template <typename Function, typename Tuple, size_t... Ns>
 inline void DispatchToFunctionImpl(Function function,
                                    Tuple&& args,
-                                   std::index_sequence<Ns...>) {
+                                   IndexSequence<Ns...>) {
   (*function)(std::get<Ns>(std::forward<Tuple>(args))...);
 }
 
 template <typename Function, typename Tuple>
 inline void DispatchToFunction(Function function, Tuple&& args) {
   DispatchToFunctionImpl(function, std::forward<Tuple>(args),
                          MakeIndexSequenceForTuple<Tuple>());
 }
@@ -86,18 +107,18 @@ template <typename ObjT,
           typename InTuple,
           typename OutTuple,
           size_t... InNs,
           size_t... OutNs>
 inline void DispatchToMethodImpl(const ObjT& obj,
                                  Method method,
                                  InTuple&& in,
                                  OutTuple* out,
-                                 std::index_sequence<InNs...>,
-                                 std::index_sequence<OutNs...>) {
+                                 IndexSequence<InNs...>,
+                                 IndexSequence<OutNs...>) {
   (obj->*method)(std::get<InNs>(std::forward<InTuple>(in))...,
                  &std::get<OutNs>(*out)...);
 }
 
 template <typename ObjT, typename Method, typename InTuple, typename OutTuple>
 inline void DispatchToMethod(const ObjT& obj,
                              Method method,
                              InTuple&& in,
