<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css" type="text/css"?>
<!--
  XUL Widget Test for textbox type="number"
  -->
<window title="Textbox type='number' test" width="500" height="600"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"></script>

<hbox>
  <textbox id="n1" type="number"/>
  <textbox id="n2" type="number" value="10" min="5" max="15"/>
</hbox>
<hbox>
  <textbox id="n4" type="number" value="-2" min="-8" max="18"/>
  <textbox id="n5" type="number" value="-17" min="-10" max="-3"/>
</hbox>
<hbox>
  <textbox id="n6" type="number" value="9" min="12" max="8"/>
  <textbox id="n8" type="number" hidespinbuttons="true"/>
</hbox>
<hbox>
  <textbox id="n9" type="number" oninput="updateInputEventCount();"/>
</hbox>

  <!-- test results are displayed in the html:body -->
  <body xmlns="http://www.w3.org/1999/xhtml" style="height: 300px; overflow: auto;"/>

  <!-- test code goes here -->
  <script type="application/javascript"><![CDATA[
SimpleTest.waitForExplicitFinish();

// ---- NOTE: the numbers used in these tests are carefully chosen to avoid
// ----       floating point rounding issues

function doTests() {
  var n1 = $("n1");
  var n2 = $("n2");
  var n4 = $("n4");
  var n5 = $("n5");
  var n6 = $("n6");

  testValsMinMax(n1, "initial n1", 0, 0, Infinity);
  testValsMinMax(n2, "initial n2", 10, 5, 15);
  testValsMinMax(n4, "initial n4", -2, -8, 18);
  testValsMinMax(n5, "initial n5", -10, -10, -3);
  testValsMinMax(n6, "initial n6", 12, 12, 12);

  // test changing the value
  n1.value = "1700";
  testVals(n1, "set value,", 1700);
  n1.value = 1600;
  testVals(n1, "set value int,", 1600);
  n2.value = "2";
  testVals(n2, "set value below min,", 5);
  n2.value = 2;
  testVals(n2, "set value below min int,", 5);
  n2.value = 18;
  testVals(n2, "set value above max,", 15);
  n2.value = -6;
  testVals(n2, "set value below min negative,", 5);
  n5.value = -2;
  testVals(n5, "set value above max positive,", -3);
  n1.value = 4.75;
  testVals(n1, "set value to decimal round,", 5);

  // test changing the valueNumber
  n1.valueNumber = 27;
  testVals(n1, "set valueNumber,", 27);
  n2.valueNumber = 1;
  testVals(n2, "set valueNumber below min,", 5);
  n2.valueNumber = 77;
  testVals(n2, "set valueNumber above max,", 15);
  n2.valueNumber = -5;
  testVals(n2, "set valueNumber below min negative,", 5);
  n5.valueNumber = -8;
  n5.valueNumber = -1;
  testVals(n5, "set valueNumber above max positive,", -3);
  n1.value = 8.9;
  testVals(n1, "set valueNumber to decimal round,", 9);

  // test changing the min
  n1.value = 6;
  n1.min = 8;
  testValsMinMax(n1, "set integer min,", 8, 8, Infinity);

  // test changing the max
  n1.value = 25;
  n1.max = 22;
  testValsMinMax(n1, "set integer max,", 22, 8, 22);

  // check read only state
  n1.readOnly = true;
  n1.min = -10;
  n1.max = 15;
  n1.value = 12;
  n1.inputField.focus();
  // no events should fire and no changes should occur when the field is read only
  synthesizeKeyExpectEvent("KEY_ArrowUp", {}, n1, "!change", "key up read only");
  is(n1.value, "12", "key up read only value");
  synthesizeKeyExpectEvent("KEY_ArrowDown", {}, n1, "!change", "key down read only");
  is(n1.value, "12", "key down read only value");

  n1.readOnly = false;

  var n9 = $("n9");
  is(n9.value, "0", "initial value");
  n9.select();
  sendString("4");
  is(inputEventCount, 1, "input event count");
  is(inputEventValue, "4", "input value");
  is(n9.value, "4", "updated value");
  sendString("2");
  is(inputEventCount, 2, "input event count");
  is(inputEventValue, "42", "input value");
  is(n9.value, "42", "updated value");
  synthesizeKey("KEY_Backspace");
  is(inputEventCount, 3, "input event count");
  is(inputEventValue, "4", "input value");
  is(n9.value, "4", "updated value");
  synthesizeKey("A", {accelKey: true});
  synthesizeKey("KEY_Delete");
  is(inputEventCount, 4, "input event count");
  is(inputEventValue, "0", "input value");
  is(n9.value, "0", "updated value");

  SimpleTest.finish();
}

var inputEventCount = 0;
var inputEventValue = null;
function updateInputEventCount() {
  inputEventValue = $("n9").value;
  inputEventCount++;
};

function testVals(nb, name, valueNumber, valueFieldNumber) {
  if (valueFieldNumber === undefined)
    valueFieldNumber = "" + valueNumber;

  SimpleTest.is(nb.value, "" + valueNumber, name + " value is '" + valueNumber + "'");
  SimpleTest.is(nb.valueNumber, valueNumber, name + " valueNumber is " + valueNumber);
  SimpleTest.is(nb.inputField.value, valueFieldNumber,
      name + " inputField value is '" + valueFieldNumber + "'");
}

function testValsMinMax(nb, name, valueNumber, min, max, valueFieldNumber) {
  testVals(nb, name, valueNumber, valueFieldNumber);
  SimpleTest.is(nb.min, min, name + " min is " + min);
  SimpleTest.is(nb.max, max, name + " max is " + max);
}

SimpleTest.waitForFocus(doTests);

  ]]></script>

</window>
