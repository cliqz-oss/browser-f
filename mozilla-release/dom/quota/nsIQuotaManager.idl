/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=2 et sw=2 tw=80: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIQuotaRequest;
interface nsIPrincipal;
interface nsIUsageCallback;

[scriptable, builtinclass, uuid(101cf53c-e7f3-4723-9f43-a23a85c8eda0)]
interface nsIQuotaManager : nsISupports
{
  /**
   * Schedules an asynchronous callback that will return the total amount of
   * disk space being used by storages for the given origin.
   *
   * @param aPrincipal
   *        A principal for the origin whose usage is being queried.
   * @param aCallback
   *        The callback that will be called when the usage is available.
   */
  nsIQuotaRequest
  getUsageForPrincipal(in nsIPrincipal aPrincipal,
                       in nsIUsageCallback aCallback);

  /**
   * Removes all storages. The files may not be deleted immediately depending
   * on prohibitive concurrent operations.
   * Be careful, this removes *all* the data that has ever been stored!
   *
   * If the dom.quotaManager.testing preference is not true the call will be
   * a no-op.
   */
  void
  clear();

  /**
   * Removes all storages stored for the given URI. The files may not be
   * deleted immediately depending on prohibitive concurrent operations.
   *
   * @param aPrincipal
   *        A principal for the origin whose storages are to be cleared.
   */
  void
  clearStoragesForPrincipal(in nsIPrincipal aPrincipal,
                            [optional] in ACString aPersistenceType);

  /**
   * Resets quota and storage management. This can be used to force
   * reinitialization of the temp storage, for example when the pref for
   * overriding the temp storage limit has changed.
   * Be carefull, this invalidates all live storages!
   *
   * If the dom.quotaManager.testing preference is not true the call will be
   * a no-op.
   */
  void
  reset();
};
