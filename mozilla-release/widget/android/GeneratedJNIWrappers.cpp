// GENERATED CODE
// Generated by the Java program at /build/annotationProcessors at compile time
// from annotations on Java methods. To update, change the annotations on the
// corresponding Java methods and rerun the build. Manually updating this file
// will cause your build to fail.

#include "GeneratedJNIWrappers.h"
#include "mozilla/jni/Accessors.h"

namespace mozilla {
namespace widget {

constexpr char ANRReporter::name[];

constexpr char ANRReporter::GetNativeStack_t::name[];
constexpr char ANRReporter::GetNativeStack_t::signature[];

constexpr char ANRReporter::ReleaseNativeStack_t::name[];
constexpr char ANRReporter::ReleaseNativeStack_t::signature[];

constexpr char ANRReporter::RequestNativeStack_t::name[];
constexpr char ANRReporter::RequestNativeStack_t::signature[];

constexpr char DownloadsIntegration::name[];

constexpr char DownloadsIntegration::ScanMedia_t::name[];
constexpr char DownloadsIntegration::ScanMedia_t::signature[];

auto DownloadsIntegration::ScanMedia(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> void
{
    return mozilla::jni::Method<ScanMedia_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::name[];

constexpr char GeckoAppShell::AcknowledgeEvent_t::name[];
constexpr char GeckoAppShell::AcknowledgeEvent_t::signature[];

auto GeckoAppShell::AcknowledgeEvent() -> void
{
    return mozilla::jni::Method<AcknowledgeEvent_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::AddPluginViewWrapper_t::name[];
constexpr char GeckoAppShell::AddPluginViewWrapper_t::signature[];

auto GeckoAppShell::AddPluginViewWrapper(mozilla::jni::Object::Param a0, float a1, float a2, float a3, float a4, bool a5) -> void
{
    return mozilla::jni::Method<AddPluginViewWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4, a5);
}

constexpr char GeckoAppShell::AlertsProgressListener_OnProgress_t::name[];
constexpr char GeckoAppShell::AlertsProgressListener_OnProgress_t::signature[];

auto GeckoAppShell::AlertsProgressListener_OnProgress(mozilla::jni::String::Param a0, int64_t a1, int64_t a2, mozilla::jni::String::Param a3) -> void
{
    return mozilla::jni::Method<AlertsProgressListener_OnProgress_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::CancelVibrate_t::name[];
constexpr char GeckoAppShell::CancelVibrate_t::signature[];

auto GeckoAppShell::CancelVibrate() -> void
{
    return mozilla::jni::Method<CancelVibrate_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::CheckURIVisited_t::name[];
constexpr char GeckoAppShell::CheckURIVisited_t::signature[];

auto GeckoAppShell::CheckURIVisited(mozilla::jni::String::Param a0) -> void
{
    return mozilla::jni::Method<CheckURIVisited_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::ClearMessageList_t::name[];
constexpr char GeckoAppShell::ClearMessageList_t::signature[];

auto GeckoAppShell::ClearMessageList(int32_t a0) -> void
{
    return mozilla::jni::Method<ClearMessageList_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::CloseCamera_t::name[];
constexpr char GeckoAppShell::CloseCamera_t::signature[];

auto GeckoAppShell::CloseCamera() -> void
{
    return mozilla::jni::Method<CloseCamera_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::CloseNotification_t::name[];
constexpr char GeckoAppShell::CloseNotification_t::signature[];

auto GeckoAppShell::CloseNotification(mozilla::jni::String::Param a0) -> void
{
    return mozilla::jni::Method<CloseNotification_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::ConnectionGetMimeType_t::name[];
constexpr char GeckoAppShell::ConnectionGetMimeType_t::signature[];

auto GeckoAppShell::ConnectionGetMimeType(mozilla::jni::Object::Param a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<ConnectionGetMimeType_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::CreateInputStream_t::name[];
constexpr char GeckoAppShell::CreateInputStream_t::signature[];

auto GeckoAppShell::CreateInputStream(mozilla::jni::Object::Param a0) -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<CreateInputStream_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::CreateMessageListWrapper_t::name[];
constexpr char GeckoAppShell::CreateMessageListWrapper_t::signature[];

auto GeckoAppShell::CreateMessageListWrapper(int64_t a0, int64_t a1, mozilla::jni::ObjectArray::Param a2, int32_t a3, mozilla::jni::String::Param a4, bool a5, bool a6, int64_t a7, bool a8, int32_t a9) -> void
{
    return mozilla::jni::Method<CreateMessageListWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

constexpr char GeckoAppShell::CreateShortcut_t::name[];
constexpr char GeckoAppShell::CreateShortcut_t::signature[];

auto GeckoAppShell::CreateShortcut(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2) -> void
{
    return mozilla::jni::Method<CreateShortcut_t>::Call(nullptr, nullptr, a0, a1, a2);
}

constexpr char GeckoAppShell::DeleteMessageWrapper_t::name[];
constexpr char GeckoAppShell::DeleteMessageWrapper_t::signature[];

auto GeckoAppShell::DeleteMessageWrapper(int32_t a0, int32_t a1) -> void
{
    return mozilla::jni::Method<DeleteMessageWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::DisableBatteryNotifications_t::name[];
constexpr char GeckoAppShell::DisableBatteryNotifications_t::signature[];

auto GeckoAppShell::DisableBatteryNotifications() -> void
{
    return mozilla::jni::Method<DisableBatteryNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::DisableNetworkNotifications_t::name[];
constexpr char GeckoAppShell::DisableNetworkNotifications_t::signature[];

auto GeckoAppShell::DisableNetworkNotifications() -> void
{
    return mozilla::jni::Method<DisableNetworkNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::DisableScreenOrientationNotifications_t::name[];
constexpr char GeckoAppShell::DisableScreenOrientationNotifications_t::signature[];

auto GeckoAppShell::DisableScreenOrientationNotifications() -> void
{
    return mozilla::jni::Method<DisableScreenOrientationNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::DisableSensor_t::name[];
constexpr char GeckoAppShell::DisableSensor_t::signature[];

auto GeckoAppShell::DisableSensor(int32_t a0) -> void
{
    return mozilla::jni::Method<DisableSensor_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::EnableBatteryNotifications_t::name[];
constexpr char GeckoAppShell::EnableBatteryNotifications_t::signature[];

auto GeckoAppShell::EnableBatteryNotifications() -> void
{
    return mozilla::jni::Method<EnableBatteryNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::EnableLocation_t::name[];
constexpr char GeckoAppShell::EnableLocation_t::signature[];

auto GeckoAppShell::EnableLocation(bool a0) -> void
{
    return mozilla::jni::Method<EnableLocation_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::EnableLocationHighAccuracy_t::name[];
constexpr char GeckoAppShell::EnableLocationHighAccuracy_t::signature[];

auto GeckoAppShell::EnableLocationHighAccuracy(bool a0) -> void
{
    return mozilla::jni::Method<EnableLocationHighAccuracy_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::EnableNetworkNotifications_t::name[];
constexpr char GeckoAppShell::EnableNetworkNotifications_t::signature[];

auto GeckoAppShell::EnableNetworkNotifications() -> void
{
    return mozilla::jni::Method<EnableNetworkNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::EnableScreenOrientationNotifications_t::name[];
constexpr char GeckoAppShell::EnableScreenOrientationNotifications_t::signature[];

auto GeckoAppShell::EnableScreenOrientationNotifications() -> void
{
    return mozilla::jni::Method<EnableScreenOrientationNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::EnableSensor_t::name[];
constexpr char GeckoAppShell::EnableSensor_t::signature[];

auto GeckoAppShell::EnableSensor(int32_t a0) -> void
{
    return mozilla::jni::Method<EnableSensor_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GamepadAdded_t::name[];
constexpr char GeckoAppShell::GamepadAdded_t::signature[];

auto GeckoAppShell::GamepadAdded(int32_t a0, int32_t a1) -> void
{
    return mozilla::jni::Method<GamepadAdded_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetConnection_t::name[];
constexpr char GeckoAppShell::GetConnection_t::signature[];

auto GeckoAppShell::GetConnection(mozilla::jni::String::Param a0) -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<GetConnection_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GetContext_t::name[];
constexpr char GeckoAppShell::GetContext_t::signature[];

auto GeckoAppShell::GetContext() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<GetContext_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetCurrentBatteryInformationWrapper_t::name[];
constexpr char GeckoAppShell::GetCurrentBatteryInformationWrapper_t::signature[];

auto GeckoAppShell::GetCurrentBatteryInformationWrapper() -> mozilla::jni::DoubleArray::LocalRef
{
    return mozilla::jni::Method<GetCurrentBatteryInformationWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetCurrentNetworkInformationWrapper_t::name[];
constexpr char GeckoAppShell::GetCurrentNetworkInformationWrapper_t::signature[];

auto GeckoAppShell::GetCurrentNetworkInformationWrapper() -> mozilla::jni::DoubleArray::LocalRef
{
    return mozilla::jni::Method<GetCurrentNetworkInformationWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetDensity_t::name[];
constexpr char GeckoAppShell::GetDensity_t::signature[];

auto GeckoAppShell::GetDensity() -> float
{
    return mozilla::jni::Method<GetDensity_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetDpiWrapper_t::name[];
constexpr char GeckoAppShell::GetDpiWrapper_t::signature[];

auto GeckoAppShell::GetDpiWrapper() -> int32_t
{
    return mozilla::jni::Method<GetDpiWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetExtensionFromMimeTypeWrapper_t::name[];
constexpr char GeckoAppShell::GetExtensionFromMimeTypeWrapper_t::signature[];

auto GeckoAppShell::GetExtensionFromMimeTypeWrapper(mozilla::jni::String::Param a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetExtensionFromMimeTypeWrapper_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GetExternalPublicDirectory_t::name[];
constexpr char GeckoAppShell::GetExternalPublicDirectory_t::signature[];

auto GeckoAppShell::GetExternalPublicDirectory(mozilla::jni::String::Param a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetExternalPublicDirectory_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GetHWDecoderCapability_t::name[];
constexpr char GeckoAppShell::GetHWDecoderCapability_t::signature[];

auto GeckoAppShell::GetHWDecoderCapability() -> bool
{
    return mozilla::jni::Method<GetHWDecoderCapability_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetHWEncoderCapability_t::name[];
constexpr char GeckoAppShell::GetHWEncoderCapability_t::signature[];

auto GeckoAppShell::GetHWEncoderCapability() -> bool
{
    return mozilla::jni::Method<GetHWEncoderCapability_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetHandlersForMimeTypeWrapper_t::name[];
constexpr char GeckoAppShell::GetHandlersForMimeTypeWrapper_t::signature[];

auto GeckoAppShell::GetHandlersForMimeTypeWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> mozilla::jni::ObjectArray::LocalRef
{
    return mozilla::jni::Method<GetHandlersForMimeTypeWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetHandlersForURLWrapper_t::name[];
constexpr char GeckoAppShell::GetHandlersForURLWrapper_t::signature[];

auto GeckoAppShell::GetHandlersForURLWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> mozilla::jni::ObjectArray::LocalRef
{
    return mozilla::jni::Method<GetHandlersForURLWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetIconForExtensionWrapper_t::name[];
constexpr char GeckoAppShell::GetIconForExtensionWrapper_t::signature[];

auto GeckoAppShell::GetIconForExtensionWrapper(mozilla::jni::String::Param a0, int32_t a1) -> mozilla::jni::ByteArray::LocalRef
{
    return mozilla::jni::Method<GetIconForExtensionWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetMaxTouchPoints_t::name[];
constexpr char GeckoAppShell::GetMaxTouchPoints_t::signature[];

auto GeckoAppShell::GetMaxTouchPoints() -> int32_t
{
    return mozilla::jni::Method<GetMaxTouchPoints_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetMessageWrapper_t::name[];
constexpr char GeckoAppShell::GetMessageWrapper_t::signature[];

auto GeckoAppShell::GetMessageWrapper(int32_t a0, int32_t a1) -> void
{
    return mozilla::jni::Method<GetMessageWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetMimeTypeFromExtensionsWrapper_t::name[];
constexpr char GeckoAppShell::GetMimeTypeFromExtensionsWrapper_t::signature[];

auto GeckoAppShell::GetMimeTypeFromExtensionsWrapper(mozilla::jni::String::Param a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetMimeTypeFromExtensionsWrapper_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GetNextMessageInListWrapper_t::name[];
constexpr char GeckoAppShell::GetNextMessageInListWrapper_t::signature[];

auto GeckoAppShell::GetNextMessageInListWrapper(int32_t a0, int32_t a1) -> void
{
    return mozilla::jni::Method<GetNextMessageInListWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetProxyForURIWrapper_t::name[];
constexpr char GeckoAppShell::GetProxyForURIWrapper_t::signature[];

auto GeckoAppShell::GetProxyForURIWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, int32_t a3) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetProxyForURIWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::GetScreenAngle_t::name[];
constexpr char GeckoAppShell::GetScreenAngle_t::signature[];

auto GeckoAppShell::GetScreenAngle() -> int32_t
{
    return mozilla::jni::Method<GetScreenAngle_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetScreenDepthWrapper_t::name[];
constexpr char GeckoAppShell::GetScreenDepthWrapper_t::signature[];

auto GeckoAppShell::GetScreenDepthWrapper() -> int32_t
{
    return mozilla::jni::Method<GetScreenDepthWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetScreenOrientationWrapper_t::name[];
constexpr char GeckoAppShell::GetScreenOrientationWrapper_t::signature[];

auto GeckoAppShell::GetScreenOrientationWrapper() -> int16_t
{
    return mozilla::jni::Method<GetScreenOrientationWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetShowPasswordSetting_t::name[];
constexpr char GeckoAppShell::GetShowPasswordSetting_t::signature[];

auto GeckoAppShell::GetShowPasswordSetting() -> bool
{
    return mozilla::jni::Method<GetShowPasswordSetting_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetSystemColoursWrapper_t::name[];
constexpr char GeckoAppShell::GetSystemColoursWrapper_t::signature[];

auto GeckoAppShell::GetSystemColoursWrapper() -> mozilla::jni::IntArray::LocalRef
{
    return mozilla::jni::Method<GetSystemColoursWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::HandleGeckoMessageWrapper_t::name[];
constexpr char GeckoAppShell::HandleGeckoMessageWrapper_t::signature[];

auto GeckoAppShell::HandleGeckoMessageWrapper(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Method<HandleGeckoMessageWrapper_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::HandleUncaughtException_t::name[];
constexpr char GeckoAppShell::HandleUncaughtException_t::signature[];

auto GeckoAppShell::HandleUncaughtException(mozilla::jni::Object::Param a0, mozilla::jni::Throwable::Param a1) -> void
{
    return mozilla::jni::Method<HandleUncaughtException_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::HideProgressDialog_t::name[];
constexpr char GeckoAppShell::HideProgressDialog_t::signature[];

auto GeckoAppShell::HideProgressDialog() -> void
{
    return mozilla::jni::Method<HideProgressDialog_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::InitCameraWrapper_t::name[];
constexpr char GeckoAppShell::InitCameraWrapper_t::signature[];

auto GeckoAppShell::InitCameraWrapper(mozilla::jni::String::Param a0, int32_t a1, int32_t a2, int32_t a3) -> mozilla::jni::IntArray::LocalRef
{
    return mozilla::jni::Method<InitCameraWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::IsNetworkLinkKnown_t::name[];
constexpr char GeckoAppShell::IsNetworkLinkKnown_t::signature[];

auto GeckoAppShell::IsNetworkLinkKnown() -> bool
{
    return mozilla::jni::Method<IsNetworkLinkKnown_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::IsNetworkLinkUp_t::name[];
constexpr char GeckoAppShell::IsNetworkLinkUp_t::signature[];

auto GeckoAppShell::IsNetworkLinkUp() -> bool
{
    return mozilla::jni::Method<IsNetworkLinkUp_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::IsTablet_t::name[];
constexpr char GeckoAppShell::IsTablet_t::signature[];

auto GeckoAppShell::IsTablet() -> bool
{
    return mozilla::jni::Method<IsTablet_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::KillAnyZombies_t::name[];
constexpr char GeckoAppShell::KillAnyZombies_t::signature[];

auto GeckoAppShell::KillAnyZombies() -> void
{
    return mozilla::jni::Method<KillAnyZombies_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::LoadPluginClass_t::name[];
constexpr char GeckoAppShell::LoadPluginClass_t::signature[];

auto GeckoAppShell::LoadPluginClass(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> mozilla::jni::ClassObject::LocalRef
{
    return mozilla::jni::Method<LoadPluginClass_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::LockScreenOrientation_t::name[];
constexpr char GeckoAppShell::LockScreenOrientation_t::signature[];

auto GeckoAppShell::LockScreenOrientation(int32_t a0) -> void
{
    return mozilla::jni::Method<LockScreenOrientation_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::MarkURIVisited_t::name[];
constexpr char GeckoAppShell::MarkURIVisited_t::signature[];

auto GeckoAppShell::MarkURIVisited(mozilla::jni::String::Param a0) -> void
{
    return mozilla::jni::Method<MarkURIVisited_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::MoveTaskToBack_t::name[];
constexpr char GeckoAppShell::MoveTaskToBack_t::signature[];

auto GeckoAppShell::MoveTaskToBack() -> void
{
    return mozilla::jni::Method<MoveTaskToBack_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::NetworkLinkType_t::name[];
constexpr char GeckoAppShell::NetworkLinkType_t::signature[];

auto GeckoAppShell::NetworkLinkType() -> int32_t
{
    return mozilla::jni::Method<NetworkLinkType_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::NotifyDefaultPrevented_t::name[];
constexpr char GeckoAppShell::NotifyDefaultPrevented_t::signature[];

auto GeckoAppShell::NotifyDefaultPrevented(bool a0) -> void
{
    return mozilla::jni::Method<NotifyDefaultPrevented_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::NotifyIME_t::name[];
constexpr char GeckoAppShell::NotifyIME_t::signature[];

auto GeckoAppShell::NotifyIME(int32_t a0) -> void
{
    return mozilla::jni::Method<NotifyIME_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::NotifyIMEChange_t::name[];
constexpr char GeckoAppShell::NotifyIMEChange_t::signature[];

auto GeckoAppShell::NotifyIMEChange(mozilla::jni::String::Param a0, int32_t a1, int32_t a2, int32_t a3) -> void
{
    return mozilla::jni::Method<NotifyIMEChange_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::NotifyIMEContext_t::name[];
constexpr char GeckoAppShell::NotifyIMEContext_t::signature[];

auto GeckoAppShell::NotifyIMEContext(int32_t a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3) -> void
{
    return mozilla::jni::Method<NotifyIMEContext_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::NotifyWakeLockChanged_t::name[];
constexpr char GeckoAppShell::NotifyWakeLockChanged_t::signature[];

auto GeckoAppShell::NotifyWakeLockChanged(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> void
{
    return mozilla::jni::Method<NotifyWakeLockChanged_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::OpenUriExternal_t::name[];
constexpr char GeckoAppShell::OpenUriExternal_t::signature[];

auto GeckoAppShell::OpenUriExternal(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3, mozilla::jni::String::Param a4, mozilla::jni::String::Param a5) -> bool
{
    return mozilla::jni::Method<OpenUriExternal_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4, a5);
}

constexpr char GeckoAppShell::PerformHapticFeedback_t::name[];
constexpr char GeckoAppShell::PerformHapticFeedback_t::signature[];

auto GeckoAppShell::PerformHapticFeedback(bool a0) -> void
{
    return mozilla::jni::Method<PerformHapticFeedback_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::RegisterSurfaceTextureFrameListener_t::name[];
constexpr char GeckoAppShell::RegisterSurfaceTextureFrameListener_t::signature[];

auto GeckoAppShell::RegisterSurfaceTextureFrameListener(mozilla::jni::Object::Param a0, int32_t a1) -> void
{
    return mozilla::jni::Method<RegisterSurfaceTextureFrameListener_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::RemovePluginView_t::name[];
constexpr char GeckoAppShell::RemovePluginView_t::signature[];

auto GeckoAppShell::RemovePluginView(mozilla::jni::Object::Param a0, bool a1) -> void
{
    return mozilla::jni::Method<RemovePluginView_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::RequestUiThreadCallback_t::name[];
constexpr char GeckoAppShell::RequestUiThreadCallback_t::signature[];

auto GeckoAppShell::RequestUiThreadCallback(int64_t a0) -> void
{
    return mozilla::jni::Method<RequestUiThreadCallback_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::ScheduleRestart_t::name[];
constexpr char GeckoAppShell::ScheduleRestart_t::signature[];

auto GeckoAppShell::ScheduleRestart() -> void
{
    return mozilla::jni::Method<ScheduleRestart_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::SendMessageWrapper_t::name[];
constexpr char GeckoAppShell::SendMessageWrapper_t::signature[];

auto GeckoAppShell::SendMessageWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, int32_t a2) -> void
{
    return mozilla::jni::Method<SendMessageWrapper_t>::Call(nullptr, nullptr, a0, a1, a2);
}

constexpr char GeckoAppShell::SetFullScreen_t::name[];
constexpr char GeckoAppShell::SetFullScreen_t::signature[];

auto GeckoAppShell::SetFullScreen(bool a0) -> void
{
    return mozilla::jni::Method<SetFullScreen_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::SetKeepScreenOn_t::name[];
constexpr char GeckoAppShell::SetKeepScreenOn_t::signature[];

auto GeckoAppShell::SetKeepScreenOn(bool a0) -> void
{
    return mozilla::jni::Method<SetKeepScreenOn_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::SetURITitle_t::name[];
constexpr char GeckoAppShell::SetURITitle_t::signature[];

auto GeckoAppShell::SetURITitle(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> void
{
    return mozilla::jni::Method<SetURITitle_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::ShowAlertNotificationWrapper_t::name[];
constexpr char GeckoAppShell::ShowAlertNotificationWrapper_t::signature[];

auto GeckoAppShell::ShowAlertNotificationWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3, mozilla::jni::String::Param a4) -> void
{
    return mozilla::jni::Method<ShowAlertNotificationWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4);
}

constexpr char GeckoAppShell::ShowInputMethodPicker_t::name[];
constexpr char GeckoAppShell::ShowInputMethodPicker_t::signature[];

auto GeckoAppShell::ShowInputMethodPicker() -> void
{
    return mozilla::jni::Method<ShowInputMethodPicker_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::StartMonitoringGamepad_t::name[];
constexpr char GeckoAppShell::StartMonitoringGamepad_t::signature[];

auto GeckoAppShell::StartMonitoringGamepad() -> void
{
    return mozilla::jni::Method<StartMonitoringGamepad_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::StopMonitoringGamepad_t::name[];
constexpr char GeckoAppShell::StopMonitoringGamepad_t::signature[];

auto GeckoAppShell::StopMonitoringGamepad() -> void
{
    return mozilla::jni::Method<StopMonitoringGamepad_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::UnlockProfile_t::name[];
constexpr char GeckoAppShell::UnlockProfile_t::signature[];

auto GeckoAppShell::UnlockProfile() -> bool
{
    return mozilla::jni::Method<UnlockProfile_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::UnlockScreenOrientation_t::name[];
constexpr char GeckoAppShell::UnlockScreenOrientation_t::signature[];

auto GeckoAppShell::UnlockScreenOrientation() -> void
{
    return mozilla::jni::Method<UnlockScreenOrientation_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::UnregisterSurfaceTextureFrameListener_t::name[];
constexpr char GeckoAppShell::UnregisterSurfaceTextureFrameListener_t::signature[];

auto GeckoAppShell::UnregisterSurfaceTextureFrameListener(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Method<UnregisterSurfaceTextureFrameListener_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::Vibrate1_t::name[];
constexpr char GeckoAppShell::Vibrate1_t::signature[];

auto GeckoAppShell::Vibrate1(int64_t a0) -> void
{
    return mozilla::jni::Method<Vibrate1_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::VibrateA_t::name[];
constexpr char GeckoAppShell::VibrateA_t::signature[];

auto GeckoAppShell::VibrateA(mozilla::jni::LongArray::Param a0, int32_t a1) -> void
{
    return mozilla::jni::Method<VibrateA_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoJavaSampler::name[];

constexpr char GeckoJavaSampler::GetFrameNameJavaProfilingWrapper_t::name[];
constexpr char GeckoJavaSampler::GetFrameNameJavaProfilingWrapper_t::signature[];

auto GeckoJavaSampler::GetFrameNameJavaProfilingWrapper(int32_t a0, int32_t a1, int32_t a2) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetFrameNameJavaProfilingWrapper_t>::Call(nullptr, nullptr, a0, a1, a2);
}

constexpr char GeckoJavaSampler::GetProfilerTime_t::name[];
constexpr char GeckoJavaSampler::GetProfilerTime_t::signature[];

constexpr char GeckoJavaSampler::GetSampleTimeJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::GetSampleTimeJavaProfiling_t::signature[];

auto GeckoJavaSampler::GetSampleTimeJavaProfiling(int32_t a0, int32_t a1) -> double
{
    return mozilla::jni::Method<GetSampleTimeJavaProfiling_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoJavaSampler::GetThreadNameJavaProfilingWrapper_t::name[];
constexpr char GeckoJavaSampler::GetThreadNameJavaProfilingWrapper_t::signature[];

auto GeckoJavaSampler::GetThreadNameJavaProfilingWrapper(int32_t a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetThreadNameJavaProfilingWrapper_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoJavaSampler::PauseJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::PauseJavaProfiling_t::signature[];

auto GeckoJavaSampler::PauseJavaProfiling() -> void
{
    return mozilla::jni::Method<PauseJavaProfiling_t>::Call(nullptr, nullptr);
}

constexpr char GeckoJavaSampler::StartJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::StartJavaProfiling_t::signature[];

auto GeckoJavaSampler::StartJavaProfiling(int32_t a0, int32_t a1) -> void
{
    return mozilla::jni::Method<StartJavaProfiling_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoJavaSampler::StopJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::StopJavaProfiling_t::signature[];

auto GeckoJavaSampler::StopJavaProfiling() -> void
{
    return mozilla::jni::Method<StopJavaProfiling_t>::Call(nullptr, nullptr);
}

constexpr char GeckoJavaSampler::UnpauseJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::UnpauseJavaProfiling_t::signature[];

auto GeckoJavaSampler::UnpauseJavaProfiling() -> void
{
    return mozilla::jni::Method<UnpauseJavaProfiling_t>::Call(nullptr, nullptr);
}

constexpr char GeckoThread::name[];

constexpr char GeckoThread::PumpMessageLoop_t::name[];
constexpr char GeckoThread::PumpMessageLoop_t::signature[];

auto GeckoThread::PumpMessageLoop(mozilla::jni::Object::Param a0) -> bool
{
    return mozilla::jni::Method<PumpMessageLoop_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoThread::SetState_t::name[];
constexpr char GeckoThread::SetState_t::signature[];

auto GeckoThread::SetState(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Method<SetState_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoThread::SpeculativeConnect_t::name[];
constexpr char GeckoThread::SpeculativeConnect_t::signature[];

constexpr char GeckoThread::ClsLoader_t::name[];
constexpr char GeckoThread::ClsLoader_t::signature[];

auto GeckoThread::ClsLoader() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Field<ClsLoader_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::MsgQueue_t::name[];
constexpr char GeckoThread::MsgQueue_t::signature[];

auto GeckoThread::MsgQueue() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Field<MsgQueue_t>::Get(nullptr, nullptr);
}

auto GeckoThread::MsgQueue(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Field<MsgQueue_t>::Set(nullptr, nullptr, a0);
}

constexpr char GeckoThread::State::name[];

constexpr char GeckoThread::State::New_t::name[];
constexpr char GeckoThread::State::New_t::signature[];

auto GeckoThread::State::New(mozilla::jni::String::Param a0, int32_t a1) -> State::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoThread::State::Is_t::name[];
constexpr char GeckoThread::State::Is_t::signature[];

auto GeckoThread::State::Is(State::Param a0) const -> bool
{
    return mozilla::jni::Method<Is_t>::Call(this, nullptr, a0);
}

constexpr char GeckoThread::State::IsAtLeast_t::name[];
constexpr char GeckoThread::State::IsAtLeast_t::signature[];

auto GeckoThread::State::IsAtLeast(State::Param a0) const -> bool
{
    return mozilla::jni::Method<IsAtLeast_t>::Call(this, nullptr, a0);
}

constexpr char GeckoThread::State::IsAtMost_t::name[];
constexpr char GeckoThread::State::IsAtMost_t::signature[];

auto GeckoThread::State::IsAtMost(State::Param a0) const -> bool
{
    return mozilla::jni::Method<IsAtMost_t>::Call(this, nullptr, a0);
}

constexpr char GeckoThread::State::IsBetween_t::name[];
constexpr char GeckoThread::State::IsBetween_t::signature[];

auto GeckoThread::State::IsBetween(State::Param a0, State::Param a1) const -> bool
{
    return mozilla::jni::Method<IsBetween_t>::Call(this, nullptr, a0, a1);
}

constexpr char GeckoThread::State::ValueOf_t::name[];
constexpr char GeckoThread::State::ValueOf_t::signature[];

auto GeckoThread::State::ValueOf(mozilla::jni::String::Param a0) -> State::LocalRef
{
    return mozilla::jni::Method<ValueOf_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoThread::State::Values_t::name[];
constexpr char GeckoThread::State::Values_t::signature[];

auto GeckoThread::State::Values() -> mozilla::jni::ObjectArray::LocalRef
{
    return mozilla::jni::Method<Values_t>::Call(nullptr, nullptr);
}

constexpr char GeckoThread::State::EXITED_t::name[];
constexpr char GeckoThread::State::EXITED_t::signature[];

auto GeckoThread::State::EXITED() -> State::LocalRef
{
    return mozilla::jni::Field<EXITED_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::State::EXITING_t::name[];
constexpr char GeckoThread::State::EXITING_t::signature[];

auto GeckoThread::State::EXITING() -> State::LocalRef
{
    return mozilla::jni::Field<EXITING_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::State::INITIAL_t::name[];
constexpr char GeckoThread::State::INITIAL_t::signature[];

auto GeckoThread::State::INITIAL() -> State::LocalRef
{
    return mozilla::jni::Field<INITIAL_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::State::JNI_READY_t::name[];
constexpr char GeckoThread::State::JNI_READY_t::signature[];

auto GeckoThread::State::JNI_READY() -> State::LocalRef
{
    return mozilla::jni::Field<JNI_READY_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::State::LAUNCHED_t::name[];
constexpr char GeckoThread::State::LAUNCHED_t::signature[];

auto GeckoThread::State::LAUNCHED() -> State::LocalRef
{
    return mozilla::jni::Field<LAUNCHED_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::State::LIBS_READY_t::name[];
constexpr char GeckoThread::State::LIBS_READY_t::signature[];

auto GeckoThread::State::LIBS_READY() -> State::LocalRef
{
    return mozilla::jni::Field<LIBS_READY_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::State::MOZGLUE_READY_t::name[];
constexpr char GeckoThread::State::MOZGLUE_READY_t::signature[];

auto GeckoThread::State::MOZGLUE_READY() -> State::LocalRef
{
    return mozilla::jni::Field<MOZGLUE_READY_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::State::PROFILE_READY_t::name[];
constexpr char GeckoThread::State::PROFILE_READY_t::signature[];

auto GeckoThread::State::PROFILE_READY() -> State::LocalRef
{
    return mozilla::jni::Field<PROFILE_READY_t>::Get(nullptr, nullptr);
}

constexpr char GeckoThread::State::RUNNING_t::name[];
constexpr char GeckoThread::State::RUNNING_t::signature[];

auto GeckoThread::State::RUNNING() -> State::LocalRef
{
    return mozilla::jni::Field<RUNNING_t>::Get(nullptr, nullptr);
}

constexpr char RestrictedProfiles::name[];

constexpr char RestrictedProfiles::IsAllowed_t::name[];
constexpr char RestrictedProfiles::IsAllowed_t::signature[];

auto RestrictedProfiles::IsAllowed(int32_t a0, mozilla::jni::String::Param a1) -> bool
{
    return mozilla::jni::Method<IsAllowed_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char RestrictedProfiles::IsUserRestricted_t::name[];
constexpr char RestrictedProfiles::IsUserRestricted_t::signature[];

auto RestrictedProfiles::IsUserRestricted() -> bool
{
    return mozilla::jni::Method<IsUserRestricted_t>::Call(nullptr, nullptr);
}

constexpr char SurfaceBits::name[];

constexpr char SurfaceBits::New_t::name[];
constexpr char SurfaceBits::New_t::signature[];

auto SurfaceBits::New() -> SurfaceBits::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr);
}

constexpr char SurfaceBits::Buffer_t::name[];
constexpr char SurfaceBits::Buffer_t::signature[];

auto SurfaceBits::Buffer() const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Field<Buffer_t>::Get(this, nullptr);
}

auto SurfaceBits::Buffer(mozilla::jni::Object::Param a0) const -> void
{
    return mozilla::jni::Field<Buffer_t>::Set(this, nullptr, a0);
}

constexpr char SurfaceBits::Format_t::name[];
constexpr char SurfaceBits::Format_t::signature[];

auto SurfaceBits::Format() const -> int32_t
{
    return mozilla::jni::Field<Format_t>::Get(this, nullptr);
}

auto SurfaceBits::Format(int32_t a0) const -> void
{
    return mozilla::jni::Field<Format_t>::Set(this, nullptr, a0);
}

constexpr char SurfaceBits::Height_t::name[];
constexpr char SurfaceBits::Height_t::signature[];

auto SurfaceBits::Height() const -> int32_t
{
    return mozilla::jni::Field<Height_t>::Get(this, nullptr);
}

auto SurfaceBits::Height(int32_t a0) const -> void
{
    return mozilla::jni::Field<Height_t>::Set(this, nullptr, a0);
}

constexpr char SurfaceBits::Width_t::name[];
constexpr char SurfaceBits::Width_t::signature[];

auto SurfaceBits::Width() const -> int32_t
{
    return mozilla::jni::Field<Width_t>::Get(this, nullptr);
}

auto SurfaceBits::Width(int32_t a0) const -> void
{
    return mozilla::jni::Field<Width_t>::Set(this, nullptr, a0);
}

constexpr char ThumbnailHelper::name[];

constexpr char ThumbnailHelper::SendThumbnail_t::name[];
constexpr char ThumbnailHelper::SendThumbnail_t::signature[];

auto ThumbnailHelper::SendThumbnail(mozilla::jni::Object::Param a0, int32_t a1, bool a2, bool a3) -> void
{
    return mozilla::jni::Method<SendThumbnail_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char DisplayPortMetrics::name[];

constexpr char DisplayPortMetrics::New_t::name[];
constexpr char DisplayPortMetrics::New_t::signature[];

auto DisplayPortMetrics::New(float a0, float a1, float a2, float a3, float a4) -> DisplayPortMetrics::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4);
}

constexpr char DisplayPortMetrics::MPosition_t::name[];
constexpr char DisplayPortMetrics::MPosition_t::signature[];

auto DisplayPortMetrics::MPosition() const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Field<MPosition_t>::Get(this, nullptr);
}

constexpr char DisplayPortMetrics::Resolution_t::name[];
constexpr char DisplayPortMetrics::Resolution_t::signature[];

auto DisplayPortMetrics::Resolution() const -> float
{
    return mozilla::jni::Field<Resolution_t>::Get(this, nullptr);
}

constexpr char GLController::name[];

constexpr char GLController::CreateEGLSurfaceForCompositorWrapper_t::name[];
constexpr char GLController::CreateEGLSurfaceForCompositorWrapper_t::signature[];

auto GLController::CreateEGLSurfaceForCompositorWrapper() const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<CreateEGLSurfaceForCompositorWrapper_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::name[];

constexpr char GeckoLayerClient::ActivateProgram_t::name[];
constexpr char GeckoLayerClient::ActivateProgram_t::signature[];

auto GeckoLayerClient::ActivateProgram() const -> void
{
    return mozilla::jni::Method<ActivateProgram_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::ContentDocumentChanged_t::name[];
constexpr char GeckoLayerClient::ContentDocumentChanged_t::signature[];

auto GeckoLayerClient::ContentDocumentChanged() const -> void
{
    return mozilla::jni::Method<ContentDocumentChanged_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::CreateFrame_t::name[];
constexpr char GeckoLayerClient::CreateFrame_t::signature[];

auto GeckoLayerClient::CreateFrame() const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<CreateFrame_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::DeactivateProgramAndRestoreState_t::name[];
constexpr char GeckoLayerClient::DeactivateProgramAndRestoreState_t::signature[];

auto GeckoLayerClient::DeactivateProgramAndRestoreState(bool a0, int32_t a1, int32_t a2, int32_t a3, int32_t a4) const -> void
{
    return mozilla::jni::Method<DeactivateProgramAndRestoreState_t>::Call(this, nullptr, a0, a1, a2, a3, a4);
}

constexpr char GeckoLayerClient::GetDisplayPort_t::name[];
constexpr char GeckoLayerClient::GetDisplayPort_t::signature[];

auto GeckoLayerClient::GetDisplayPort(bool a0, bool a1, int32_t a2, mozilla::jni::Object::Param a3) const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<GetDisplayPort_t>::Call(this, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoLayerClient::IsContentDocumentDisplayed_t::name[];
constexpr char GeckoLayerClient::IsContentDocumentDisplayed_t::signature[];

auto GeckoLayerClient::IsContentDocumentDisplayed() const -> bool
{
    return mozilla::jni::Method<IsContentDocumentDisplayed_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::ProgressiveUpdateCallback_t::name[];
constexpr char GeckoLayerClient::ProgressiveUpdateCallback_t::signature[];

auto GeckoLayerClient::ProgressiveUpdateCallback(bool a0, float a1, float a2, float a3, float a4, float a5, bool a6) const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<ProgressiveUpdateCallback_t>::Call(this, nullptr, a0, a1, a2, a3, a4, a5, a6);
}

constexpr char GeckoLayerClient::SetFirstPaintViewport_t::name[];
constexpr char GeckoLayerClient::SetFirstPaintViewport_t::signature[];

auto GeckoLayerClient::SetFirstPaintViewport(float a0, float a1, float a2, float a3, float a4, float a5, float a6) const -> void
{
    return mozilla::jni::Method<SetFirstPaintViewport_t>::Call(this, nullptr, a0, a1, a2, a3, a4, a5, a6);
}

constexpr char GeckoLayerClient::SetPageRect_t::name[];
constexpr char GeckoLayerClient::SetPageRect_t::signature[];

auto GeckoLayerClient::SetPageRect(float a0, float a1, float a2, float a3) const -> void
{
    return mozilla::jni::Method<SetPageRect_t>::Call(this, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoLayerClient::SyncFrameMetrics_t::name[];
constexpr char GeckoLayerClient::SyncFrameMetrics_t::signature[];

auto GeckoLayerClient::SyncFrameMetrics(float a0, float a1, float a2, float a3, float a4, float a5, float a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, float a11, bool a12, int32_t a13) const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<SyncFrameMetrics_t>::Call(this, nullptr, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

constexpr char GeckoLayerClient::SyncViewportInfo_t::name[];
constexpr char GeckoLayerClient::SyncViewportInfo_t::signature[];

auto GeckoLayerClient::SyncViewportInfo(int32_t a0, int32_t a1, int32_t a2, int32_t a3, float a4, bool a5, int32_t a6) const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<SyncViewportInfo_t>::Call(this, nullptr, a0, a1, a2, a3, a4, a5, a6);
}

constexpr char ImmutableViewportMetrics::name[];

constexpr char ImmutableViewportMetrics::New_t::name[];
constexpr char ImmutableViewportMetrics::New_t::signature[];

auto ImmutableViewportMetrics::New(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, int32_t a10, int32_t a11, float a12) -> ImmutableViewportMetrics::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

constexpr char LayerView::name[];

constexpr char LayerView::RegisterCompositorWrapper_t::name[];
constexpr char LayerView::RegisterCompositorWrapper_t::signature[];

auto LayerView::RegisterCompositorWrapper() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<RegisterCompositorWrapper_t>::Call(nullptr, nullptr);
}

constexpr char LayerView::updateZoomedView_t::name[];
constexpr char LayerView::updateZoomedView_t::signature[];

auto LayerView::updateZoomedView(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Method<updateZoomedView_t>::Call(nullptr, nullptr, a0);
}

constexpr char NativePanZoomController::name[];

constexpr char NativePanZoomController::RequestContentRepaintWrapper_t::name[];
constexpr char NativePanZoomController::RequestContentRepaintWrapper_t::signature[];

auto NativePanZoomController::RequestContentRepaintWrapper(float a0, float a1, float a2, float a3, float a4) const -> void
{
    return mozilla::jni::Method<RequestContentRepaintWrapper_t>::Call(this, nullptr, a0, a1, a2, a3, a4);
}

constexpr char ProgressiveUpdateData::name[];

constexpr char ProgressiveUpdateData::New_t::name[];
constexpr char ProgressiveUpdateData::New_t::signature[];

auto ProgressiveUpdateData::New() -> ProgressiveUpdateData::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr);
}

constexpr char ProgressiveUpdateData::SetViewport_t::name[];
constexpr char ProgressiveUpdateData::SetViewport_t::signature[];

auto ProgressiveUpdateData::SetViewport(mozilla::jni::Object::Param a0) const -> void
{
    return mozilla::jni::Method<SetViewport_t>::Call(this, nullptr, a0);
}

constexpr char ProgressiveUpdateData::Abort_t::name[];
constexpr char ProgressiveUpdateData::Abort_t::signature[];

auto ProgressiveUpdateData::Abort() const -> bool
{
    return mozilla::jni::Field<Abort_t>::Get(this, nullptr);
}

auto ProgressiveUpdateData::Abort(bool a0) const -> void
{
    return mozilla::jni::Field<Abort_t>::Set(this, nullptr, a0);
}

constexpr char ProgressiveUpdateData::Scale_t::name[];
constexpr char ProgressiveUpdateData::Scale_t::signature[];

auto ProgressiveUpdateData::Scale() const -> float
{
    return mozilla::jni::Field<Scale_t>::Get(this, nullptr);
}

auto ProgressiveUpdateData::Scale(float a0) const -> void
{
    return mozilla::jni::Field<Scale_t>::Set(this, nullptr, a0);
}

constexpr char ProgressiveUpdateData::X_t::name[];
constexpr char ProgressiveUpdateData::X_t::signature[];

auto ProgressiveUpdateData::X() const -> float
{
    return mozilla::jni::Field<X_t>::Get(this, nullptr);
}

auto ProgressiveUpdateData::X(float a0) const -> void
{
    return mozilla::jni::Field<X_t>::Set(this, nullptr, a0);
}

constexpr char ProgressiveUpdateData::Y_t::name[];
constexpr char ProgressiveUpdateData::Y_t::signature[];

auto ProgressiveUpdateData::Y() const -> float
{
    return mozilla::jni::Field<Y_t>::Get(this, nullptr);
}

auto ProgressiveUpdateData::Y(float a0) const -> void
{
    return mozilla::jni::Field<Y_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::name[];

constexpr char ViewTransform::New_t::name[];
constexpr char ViewTransform::New_t::signature[];

auto ViewTransform::New(float a0, float a1, float a2) -> ViewTransform::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0, a1, a2);
}

constexpr char ViewTransform::FixedLayerMarginBottom_t::name[];
constexpr char ViewTransform::FixedLayerMarginBottom_t::signature[];

auto ViewTransform::FixedLayerMarginBottom() const -> float
{
    return mozilla::jni::Field<FixedLayerMarginBottom_t>::Get(this, nullptr);
}

auto ViewTransform::FixedLayerMarginBottom(float a0) const -> void
{
    return mozilla::jni::Field<FixedLayerMarginBottom_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginLeft_t::name[];
constexpr char ViewTransform::FixedLayerMarginLeft_t::signature[];

auto ViewTransform::FixedLayerMarginLeft() const -> float
{
    return mozilla::jni::Field<FixedLayerMarginLeft_t>::Get(this, nullptr);
}

auto ViewTransform::FixedLayerMarginLeft(float a0) const -> void
{
    return mozilla::jni::Field<FixedLayerMarginLeft_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginRight_t::name[];
constexpr char ViewTransform::FixedLayerMarginRight_t::signature[];

auto ViewTransform::FixedLayerMarginRight() const -> float
{
    return mozilla::jni::Field<FixedLayerMarginRight_t>::Get(this, nullptr);
}

auto ViewTransform::FixedLayerMarginRight(float a0) const -> void
{
    return mozilla::jni::Field<FixedLayerMarginRight_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginTop_t::name[];
constexpr char ViewTransform::FixedLayerMarginTop_t::signature[];

auto ViewTransform::FixedLayerMarginTop() const -> float
{
    return mozilla::jni::Field<FixedLayerMarginTop_t>::Get(this, nullptr);
}

auto ViewTransform::FixedLayerMarginTop(float a0) const -> void
{
    return mozilla::jni::Field<FixedLayerMarginTop_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::Height_t::name[];
constexpr char ViewTransform::Height_t::signature[];

auto ViewTransform::Height() const -> float
{
    return mozilla::jni::Field<Height_t>::Get(this, nullptr);
}

auto ViewTransform::Height(float a0) const -> void
{
    return mozilla::jni::Field<Height_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::Scale_t::name[];
constexpr char ViewTransform::Scale_t::signature[];

auto ViewTransform::Scale() const -> float
{
    return mozilla::jni::Field<Scale_t>::Get(this, nullptr);
}

auto ViewTransform::Scale(float a0) const -> void
{
    return mozilla::jni::Field<Scale_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::Width_t::name[];
constexpr char ViewTransform::Width_t::signature[];

auto ViewTransform::Width() const -> float
{
    return mozilla::jni::Field<Width_t>::Get(this, nullptr);
}

auto ViewTransform::Width(float a0) const -> void
{
    return mozilla::jni::Field<Width_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::X_t::name[];
constexpr char ViewTransform::X_t::signature[];

auto ViewTransform::X() const -> float
{
    return mozilla::jni::Field<X_t>::Get(this, nullptr);
}

auto ViewTransform::X(float a0) const -> void
{
    return mozilla::jni::Field<X_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::Y_t::name[];
constexpr char ViewTransform::Y_t::signature[];

auto ViewTransform::Y() const -> float
{
    return mozilla::jni::Field<Y_t>::Get(this, nullptr);
}

auto ViewTransform::Y(float a0) const -> void
{
    return mozilla::jni::Field<Y_t>::Set(this, nullptr, a0);
}

constexpr char MatrixBlobCursor::name[];

constexpr char MatrixBlobCursor::New_t::name[];
constexpr char MatrixBlobCursor::New_t::signature[];

auto MatrixBlobCursor::New(mozilla::jni::ObjectArray::Param a0) -> MatrixBlobCursor::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0);
}

constexpr char MatrixBlobCursor::New2_t::name[];
constexpr char MatrixBlobCursor::New2_t::signature[];

auto MatrixBlobCursor::New(mozilla::jni::ObjectArray::Param a0, int32_t a1) -> MatrixBlobCursor::LocalRef
{
    return mozilla::jni::Constructor<New2_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char MatrixBlobCursor::AddRow_t::name[];
constexpr char MatrixBlobCursor::AddRow_t::signature[];

auto MatrixBlobCursor::AddRow(mozilla::jni::Object::Param a0) const -> void
{
    return mozilla::jni::Method<AddRow_t>::Call(this, nullptr, a0);
}

constexpr char MatrixBlobCursor::AddRow2_t::name[];
constexpr char MatrixBlobCursor::AddRow2_t::signature[];

auto MatrixBlobCursor::AddRow(mozilla::jni::Object::Param a0, int32_t a1) const -> void
{
    return mozilla::jni::Method<AddRow2_t>::Call(this, nullptr, a0, a1);
}

constexpr char MatrixBlobCursor::AddRow3_t::name[];
constexpr char MatrixBlobCursor::AddRow3_t::signature[];

auto MatrixBlobCursor::AddRow(mozilla::jni::ObjectArray::Param a0) const -> void
{
    return mozilla::jni::Method<AddRow3_t>::Call(this, nullptr, a0);
}

constexpr char SQLiteBridgeException::name[];

constexpr char SQLiteBridgeException::New_t::name[];
constexpr char SQLiteBridgeException::New_t::signature[];

auto SQLiteBridgeException::New() -> SQLiteBridgeException::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr);
}

constexpr char SQLiteBridgeException::New2_t::name[];
constexpr char SQLiteBridgeException::New2_t::signature[];

auto SQLiteBridgeException::New(mozilla::jni::String::Param a0) -> SQLiteBridgeException::LocalRef
{
    return mozilla::jni::Constructor<New2_t>::Call(nullptr, nullptr, a0);
}

constexpr char SQLiteBridgeException::SerialVersionUID_t::name[];
constexpr char SQLiteBridgeException::SerialVersionUID_t::signature[];

auto SQLiteBridgeException::SerialVersionUID() -> int64_t
{
    return mozilla::jni::Field<SerialVersionUID_t>::Get(nullptr, nullptr);
}

constexpr char Clipboard::name[];

constexpr char Clipboard::ClearText_t::name[];
constexpr char Clipboard::ClearText_t::signature[];

auto Clipboard::ClearText() -> void
{
    return mozilla::jni::Method<ClearText_t>::Call(nullptr, nullptr);
}

constexpr char Clipboard::GetClipboardTextWrapper_t::name[];
constexpr char Clipboard::GetClipboardTextWrapper_t::signature[];

auto Clipboard::GetClipboardTextWrapper() -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetClipboardTextWrapper_t>::Call(nullptr, nullptr);
}

constexpr char Clipboard::HasText_t::name[];
constexpr char Clipboard::HasText_t::signature[];

auto Clipboard::HasText() -> bool
{
    return mozilla::jni::Method<HasText_t>::Call(nullptr, nullptr);
}

constexpr char Clipboard::SetClipboardText_t::name[];
constexpr char Clipboard::SetClipboardText_t::signature[];

auto Clipboard::SetClipboardText(mozilla::jni::String::Param a0) -> void
{
    return mozilla::jni::Method<SetClipboardText_t>::Call(nullptr, nullptr, a0);
}

constexpr char NativeJSContainer::name[];

constexpr char NativeJSContainer::New_t::name[];
constexpr char NativeJSContainer::New_t::signature[];

auto NativeJSContainer::New() -> NativeJSContainer::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr);
}

constexpr char NativeJSContainer::Clone2_t::name[];
constexpr char NativeJSContainer::Clone2_t::signature[];

constexpr char NativeJSContainer::DisposeNative_t::name[];
constexpr char NativeJSContainer::DisposeNative_t::signature[];

constexpr char NativeJSObject::name[];

constexpr char NativeJSObject::New_t::name[];
constexpr char NativeJSObject::New_t::signature[];

auto NativeJSObject::New() -> NativeJSObject::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr);
}

constexpr char NativeJSObject::DisposeNative_t::name[];
constexpr char NativeJSObject::DisposeNative_t::signature[];

auto NativeJSObject::DisposeNative() const -> void
{
    return mozilla::jni::Method<DisposeNative_t>::Call(this, nullptr);
}

constexpr char NativeJSObject::GetBoolean_t::name[];
constexpr char NativeJSObject::GetBoolean_t::signature[];

constexpr char NativeJSObject::GetBooleanArray_t::name[];
constexpr char NativeJSObject::GetBooleanArray_t::signature[];

constexpr char NativeJSObject::GetBundle_t::name[];
constexpr char NativeJSObject::GetBundle_t::signature[];

constexpr char NativeJSObject::GetBundleArray_t::name[];
constexpr char NativeJSObject::GetBundleArray_t::signature[];

constexpr char NativeJSObject::GetDouble_t::name[];
constexpr char NativeJSObject::GetDouble_t::signature[];

constexpr char NativeJSObject::GetDoubleArray_t::name[];
constexpr char NativeJSObject::GetDoubleArray_t::signature[];

constexpr char NativeJSObject::GetInt_t::name[];
constexpr char NativeJSObject::GetInt_t::signature[];

constexpr char NativeJSObject::GetIntArray_t::name[];
constexpr char NativeJSObject::GetIntArray_t::signature[];

constexpr char NativeJSObject::GetObject_t::name[];
constexpr char NativeJSObject::GetObject_t::signature[];

constexpr char NativeJSObject::GetObjectArray_t::name[];
constexpr char NativeJSObject::GetObjectArray_t::signature[];

constexpr char NativeJSObject::GetString_t::name[];
constexpr char NativeJSObject::GetString_t::signature[];

constexpr char NativeJSObject::GetStringArray_t::name[];
constexpr char NativeJSObject::GetStringArray_t::signature[];

constexpr char NativeJSObject::Has_t::name[];
constexpr char NativeJSObject::Has_t::signature[];

constexpr char NativeJSObject::OptBoolean_t::name[];
constexpr char NativeJSObject::OptBoolean_t::signature[];

constexpr char NativeJSObject::OptBooleanArray_t::name[];
constexpr char NativeJSObject::OptBooleanArray_t::signature[];

constexpr char NativeJSObject::OptBundle_t::name[];
constexpr char NativeJSObject::OptBundle_t::signature[];

constexpr char NativeJSObject::OptBundleArray_t::name[];
constexpr char NativeJSObject::OptBundleArray_t::signature[];

constexpr char NativeJSObject::OptDouble_t::name[];
constexpr char NativeJSObject::OptDouble_t::signature[];

constexpr char NativeJSObject::OptDoubleArray_t::name[];
constexpr char NativeJSObject::OptDoubleArray_t::signature[];

constexpr char NativeJSObject::OptInt_t::name[];
constexpr char NativeJSObject::OptInt_t::signature[];

constexpr char NativeJSObject::OptIntArray_t::name[];
constexpr char NativeJSObject::OptIntArray_t::signature[];

constexpr char NativeJSObject::OptObject_t::name[];
constexpr char NativeJSObject::OptObject_t::signature[];

constexpr char NativeJSObject::OptObjectArray_t::name[];
constexpr char NativeJSObject::OptObjectArray_t::signature[];

constexpr char NativeJSObject::OptString_t::name[];
constexpr char NativeJSObject::OptString_t::signature[];

constexpr char NativeJSObject::OptStringArray_t::name[];
constexpr char NativeJSObject::OptStringArray_t::signature[];

constexpr char NativeJSObject::ToBundle_t::name[];
constexpr char NativeJSObject::ToBundle_t::signature[];

constexpr char NativeJSObject::ToString_t::name[];
constexpr char NativeJSObject::ToString_t::signature[];

} /* widget */
} /* mozilla */
