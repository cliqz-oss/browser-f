// GENERATED CODE
// Generated by the Java program at /build/annotationProcessors at compile time
// from annotations on Java methods. To update, change the annotations on the
// corresponding Java methods and rerun the build. Manually updating this file
// will cause your build to fail.

#ifndef GeneratedJNIWrappers_h
#define GeneratedJNIWrappers_h

#include "mozilla/jni/Refs.h"

namespace mozilla {
namespace widget {

class ANRReporter : public mozilla::jni::Class<ANRReporter>
{
public:
    typedef mozilla::jni::Ref<ANRReporter> Ref;
    typedef mozilla::jni::LocalRef<ANRReporter> LocalRef;
    typedef mozilla::jni::GlobalRef<ANRReporter> GlobalRef;
    typedef const mozilla::jni::Param<ANRReporter>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/ANRReporter";

protected:
    ANRReporter(jobject instance) : Class(instance) {}

public:
    struct GetNativeStack_t {
        typedef ANRReporter Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getNativeStack";
        static constexpr char signature[] =
                "()Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct ReleaseNativeStack_t {
        typedef ANRReporter Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "releaseNativeStack";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct RequestNativeStack_t {
        typedef ANRReporter Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                bool> Args;
        static constexpr char name[] = "requestNativeStack";
        static constexpr char signature[] =
                "(Z)Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    template<class Impl> class Natives;
};

class DownloadsIntegration : public mozilla::jni::Class<DownloadsIntegration>
{
public:
    typedef mozilla::jni::Ref<DownloadsIntegration> Ref;
    typedef mozilla::jni::LocalRef<DownloadsIntegration> LocalRef;
    typedef mozilla::jni::GlobalRef<DownloadsIntegration> GlobalRef;
    typedef const mozilla::jni::Param<DownloadsIntegration>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/DownloadsIntegration";

protected:
    DownloadsIntegration(jobject instance) : Class(instance) {}

public:
    struct ScanMedia_t {
        typedef DownloadsIntegration Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "scanMedia";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ScanMedia(mozilla::jni::String::Param, mozilla::jni::String::Param) -> void;

};

class GeckoAppShell : public mozilla::jni::Class<GeckoAppShell>
{
public:
    typedef mozilla::jni::Ref<GeckoAppShell> Ref;
    typedef mozilla::jni::LocalRef<GeckoAppShell> LocalRef;
    typedef mozilla::jni::GlobalRef<GeckoAppShell> GlobalRef;
    typedef const mozilla::jni::Param<GeckoAppShell>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/GeckoAppShell";

protected:
    GeckoAppShell(jobject instance) : Class(instance) {}

public:
    struct AcknowledgeEvent_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "acknowledgeEvent";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto AcknowledgeEvent() -> void;

public:
    struct AddPluginViewWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param,
                float,
                float,
                float,
                float,
                bool> Args;
        static constexpr char name[] = "addPluginView";
        static constexpr char signature[] =
                "(Landroid/view/View;FFFFZ)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto AddPluginViewWrapper(mozilla::jni::Object::Param, float, float, float, float, bool) -> void;

public:
    struct AlertsProgressListener_OnProgress_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                int64_t,
                int64_t,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "alertsProgressListener_OnProgress";
        static constexpr char signature[] =
                "(Ljava/lang/String;JJLjava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto AlertsProgressListener_OnProgress(mozilla::jni::String::Param, int64_t, int64_t, mozilla::jni::String::Param) -> void;

public:
    struct CancelVibrate_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "cancelVibrate";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto CancelVibrate() -> void;

public:
    struct CheckURIVisited_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "checkUriVisited";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto CheckURIVisited(mozilla::jni::String::Param) -> void;

public:
    struct ClearMessageList_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t> Args;
        static constexpr char name[] = "clearMessageList";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ClearMessageList(int32_t) -> void;

public:
    struct CloseCamera_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "closeCamera";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto CloseCamera() -> void;

public:
    struct CloseNotification_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "closeNotification";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto CloseNotification(mozilla::jni::String::Param) -> void;

public:
    struct ConnectionGetMimeType_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "connectionGetMimeType";
        static constexpr char signature[] =
                "(Ljava/net/URLConnection;)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ConnectionGetMimeType(mozilla::jni::Object::Param) -> mozilla::jni::String::LocalRef;

public:
    struct CreateInputStream_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "createInputStream";
        static constexpr char signature[] =
                "(Ljava/net/URLConnection;)Ljava/io/InputStream;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto CreateInputStream(mozilla::jni::Object::Param) -> mozilla::jni::Object::LocalRef;

public:
    struct CreateMessageListWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int64_t,
                int64_t,
                mozilla::jni::ObjectArray::Param,
                int32_t,
                mozilla::jni::String::Param,
                bool,
                bool,
                int64_t,
                bool,
                int32_t> Args;
        static constexpr char name[] = "createMessageList";
        static constexpr char signature[] =
                "(JJ[Ljava/lang/String;ILjava/lang/String;ZZJZI)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto CreateMessageListWrapper(int64_t, int64_t, mozilla::jni::ObjectArray::Param, int32_t, mozilla::jni::String::Param, bool, bool, int64_t, bool, int32_t) -> void;

public:
    struct CreateShortcut_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "createShortcut";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto CreateShortcut(mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param) -> void;

public:
    struct DeleteMessageWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "deleteMessage";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto DeleteMessageWrapper(int32_t, int32_t) -> void;

public:
    struct DisableBatteryNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "disableBatteryNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto DisableBatteryNotifications() -> void;

public:
    struct DisableNetworkNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "disableNetworkNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto DisableNetworkNotifications() -> void;

public:
    struct DisableScreenOrientationNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "disableScreenOrientationNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto DisableScreenOrientationNotifications() -> void;

public:
    struct DisableSensor_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t> Args;
        static constexpr char name[] = "disableSensor";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto DisableSensor(int32_t) -> void;

public:
    struct EnableBatteryNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "enableBatteryNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto EnableBatteryNotifications() -> void;

public:
    struct EnableLocation_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                bool> Args;
        static constexpr char name[] = "enableLocation";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto EnableLocation(bool) -> void;

public:
    struct EnableLocationHighAccuracy_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                bool> Args;
        static constexpr char name[] = "enableLocationHighAccuracy";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto EnableLocationHighAccuracy(bool) -> void;

public:
    struct EnableNetworkNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "enableNetworkNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto EnableNetworkNotifications() -> void;

public:
    struct EnableScreenOrientationNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "enableScreenOrientationNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto EnableScreenOrientationNotifications() -> void;

public:
    struct EnableSensor_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t> Args;
        static constexpr char name[] = "enableSensor";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto EnableSensor(int32_t) -> void;

public:
    struct GamepadAdded_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "gamepadAdded";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GamepadAdded(int32_t, int32_t) -> void;

public:
    struct GetConnection_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getConnection";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/net/URLConnection;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetConnection(mozilla::jni::String::Param) -> mozilla::jni::Object::LocalRef;

public:
    struct GetContext_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getContext";
        static constexpr char signature[] =
                "()Landroid/content/Context;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetContext() -> mozilla::jni::Object::LocalRef;

public:
    struct GetCurrentBatteryInformationWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::DoubleArray::LocalRef ReturnType;
        typedef mozilla::jni::DoubleArray::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getCurrentBatteryInformation";
        static constexpr char signature[] =
                "()[D";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetCurrentBatteryInformationWrapper() -> mozilla::jni::DoubleArray::LocalRef;

public:
    struct GetCurrentNetworkInformationWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::DoubleArray::LocalRef ReturnType;
        typedef mozilla::jni::DoubleArray::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getCurrentNetworkInformation";
        static constexpr char signature[] =
                "()[D";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetCurrentNetworkInformationWrapper() -> mozilla::jni::DoubleArray::LocalRef;

public:
    struct GetDensity_t {
        typedef GeckoAppShell Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getDensity";
        static constexpr char signature[] =
                "()F";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetDensity() -> float;

public:
    struct GetDpiWrapper_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getDpi";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetDpiWrapper() -> int32_t;

public:
    struct GetExtensionFromMimeTypeWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getExtensionFromMimeType";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetExtensionFromMimeTypeWrapper(mozilla::jni::String::Param) -> mozilla::jni::String::LocalRef;

public:
    struct GetExternalPublicDirectory_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getExternalPublicDirectory";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetExternalPublicDirectory(mozilla::jni::String::Param) -> mozilla::jni::String::LocalRef;

public:
    struct GetHWDecoderCapability_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getHWDecoderCapability";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetHWDecoderCapability() -> bool;

public:
    struct GetHWEncoderCapability_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getHWEncoderCapability";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetHWEncoderCapability() -> bool;

public:
    struct GetHandlersForMimeTypeWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getHandlersForMimeType";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetHandlersForMimeTypeWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param) -> mozilla::jni::ObjectArray::LocalRef;

public:
    struct GetHandlersForURLWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getHandlersForURL";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetHandlersForURLWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param) -> mozilla::jni::ObjectArray::LocalRef;

public:
    struct GetIconForExtensionWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::ByteArray::LocalRef ReturnType;
        typedef mozilla::jni::ByteArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                int32_t> Args;
        static constexpr char name[] = "getIconForExtension";
        static constexpr char signature[] =
                "(Ljava/lang/String;I)[B";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetIconForExtensionWrapper(mozilla::jni::String::Param, int32_t) -> mozilla::jni::ByteArray::LocalRef;

public:
    struct GetMaxTouchPoints_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getMaxTouchPoints";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetMaxTouchPoints() -> int32_t;

public:
    struct GetMessageWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "getMessage";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetMessageWrapper(int32_t, int32_t) -> void;

public:
    struct GetMimeTypeFromExtensionsWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getMimeTypeFromExtensions";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetMimeTypeFromExtensionsWrapper(mozilla::jni::String::Param) -> mozilla::jni::String::LocalRef;

public:
    struct GetNextMessageInListWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "getNextMessageInList";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetNextMessageInListWrapper(int32_t, int32_t) -> void;

public:
    struct GetProxyForURIWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                int32_t> Args;
        static constexpr char name[] = "getProxyForURI";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetProxyForURIWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, int32_t) -> mozilla::jni::String::LocalRef;

public:
    struct GetScreenAngle_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getScreenAngle";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetScreenAngle() -> int32_t;

public:
    struct GetScreenDepthWrapper_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getScreenDepth";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetScreenDepthWrapper() -> int32_t;

public:
    struct GetScreenOrientationWrapper_t {
        typedef GeckoAppShell Owner;
        typedef int16_t ReturnType;
        typedef int16_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getScreenOrientation";
        static constexpr char signature[] =
                "()S";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetScreenOrientationWrapper() -> int16_t;

public:
    struct GetShowPasswordSetting_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getShowPasswordSetting";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetShowPasswordSetting() -> bool;

public:
    struct GetSystemColoursWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::IntArray::LocalRef ReturnType;
        typedef mozilla::jni::IntArray::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getSystemColors";
        static constexpr char signature[] =
                "()[I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetSystemColoursWrapper() -> mozilla::jni::IntArray::LocalRef;

public:
    struct HandleGeckoMessageWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "handleGeckoMessage";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/util/NativeJSContainer;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto HandleGeckoMessageWrapper(mozilla::jni::Object::Param) -> void;

public:
    struct HandleUncaughtException_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param,
                mozilla::jni::Throwable::Param> Args;
        static constexpr char name[] = "handleUncaughtException";
        static constexpr char signature[] =
                "(Ljava/lang/Thread;Ljava/lang/Throwable;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::IGNORE;
    };

    static auto HandleUncaughtException(mozilla::jni::Object::Param, mozilla::jni::Throwable::Param) -> void;

public:
    struct HideProgressDialog_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "hideProgressDialog";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto HideProgressDialog() -> void;

public:
    struct InitCameraWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::IntArray::LocalRef ReturnType;
        typedef mozilla::jni::IntArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                int32_t,
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "initCamera";
        static constexpr char signature[] =
                "(Ljava/lang/String;III)[I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto InitCameraWrapper(mozilla::jni::String::Param, int32_t, int32_t, int32_t) -> mozilla::jni::IntArray::LocalRef;

public:
    struct IsNetworkLinkKnown_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "isNetworkLinkKnown";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto IsNetworkLinkKnown() -> bool;

public:
    struct IsNetworkLinkUp_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "isNetworkLinkUp";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto IsNetworkLinkUp() -> bool;

public:
    struct IsTablet_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "isTablet";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto IsTablet() -> bool;

public:
    struct KillAnyZombies_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "killAnyZombies";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto KillAnyZombies() -> void;

public:
    struct LoadPluginClass_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::ClassObject::LocalRef ReturnType;
        typedef mozilla::jni::ClassObject::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "loadPluginClass";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Class;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto LoadPluginClass(mozilla::jni::String::Param, mozilla::jni::String::Param) -> mozilla::jni::ClassObject::LocalRef;

public:
    struct LockScreenOrientation_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t> Args;
        static constexpr char name[] = "lockScreenOrientation";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto LockScreenOrientation(int32_t) -> void;

public:
    struct MarkURIVisited_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "markUriVisited";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto MarkURIVisited(mozilla::jni::String::Param) -> void;

public:
    struct MoveTaskToBack_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "moveTaskToBack";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto MoveTaskToBack() -> void;

public:
    struct NetworkLinkType_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "networkLinkType";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto NetworkLinkType() -> int32_t;

public:
    struct NotifyDefaultPrevented_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                bool> Args;
        static constexpr char name[] = "notifyDefaultPrevented";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto NotifyDefaultPrevented(bool) -> void;

public:
    struct NotifyIME_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t> Args;
        static constexpr char name[] = "notifyIME";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto NotifyIME(int32_t) -> void;

public:
    struct NotifyIMEChange_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                int32_t,
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "notifyIMEChange";
        static constexpr char signature[] =
                "(Ljava/lang/String;III)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto NotifyIMEChange(mozilla::jni::String::Param, int32_t, int32_t, int32_t) -> void;

public:
    struct NotifyIMEContext_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "notifyIMEContext";
        static constexpr char signature[] =
                "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto NotifyIMEContext(int32_t, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param) -> void;

public:
    struct NotifyWakeLockChanged_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "notifyWakeLockChanged";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto NotifyWakeLockChanged(mozilla::jni::String::Param, mozilla::jni::String::Param) -> void;

public:
    struct OpenUriExternal_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "openUriExternal";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto OpenUriExternal(mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param) -> bool;

public:
    struct PerformHapticFeedback_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                bool> Args;
        static constexpr char name[] = "performHapticFeedback";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto PerformHapticFeedback(bool) -> void;

public:
    struct RegisterSurfaceTextureFrameListener_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param,
                int32_t> Args;
        static constexpr char name[] = "registerSurfaceTextureFrameListener";
        static constexpr char signature[] =
                "(Ljava/lang/Object;I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto RegisterSurfaceTextureFrameListener(mozilla::jni::Object::Param, int32_t) -> void;

public:
    struct RemovePluginView_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param,
                bool> Args;
        static constexpr char name[] = "removePluginView";
        static constexpr char signature[] =
                "(Landroid/view/View;Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto RemovePluginView(mozilla::jni::Object::Param, bool) -> void;

public:
    struct RequestUiThreadCallback_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int64_t> Args;
        static constexpr char name[] = "requestUiThreadCallback";
        static constexpr char signature[] =
                "(J)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto RequestUiThreadCallback(int64_t) -> void;

public:
    struct ScheduleRestart_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "scheduleRestart";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ScheduleRestart() -> void;

public:
    struct SendMessageWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                int32_t> Args;
        static constexpr char name[] = "sendMessage";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto SendMessageWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param, int32_t) -> void;

public:
    struct SetFullScreen_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                bool> Args;
        static constexpr char name[] = "setFullScreen";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto SetFullScreen(bool) -> void;

public:
    struct SetKeepScreenOn_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                bool> Args;
        static constexpr char name[] = "setKeepScreenOn";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto SetKeepScreenOn(bool) -> void;

public:
    struct SetURITitle_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "setUriTitle";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto SetURITitle(mozilla::jni::String::Param, mozilla::jni::String::Param) -> void;

public:
    struct ShowAlertNotificationWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "showAlertNotification";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ShowAlertNotificationWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param) -> void;

public:
    struct ShowInputMethodPicker_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "showInputMethodPicker";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ShowInputMethodPicker() -> void;

public:
    struct StartMonitoringGamepad_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "startMonitoringGamepad";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto StartMonitoringGamepad() -> void;

public:
    struct StopMonitoringGamepad_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "stopMonitoringGamepad";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto StopMonitoringGamepad() -> void;

public:
    struct UnlockProfile_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "unlockProfile";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto UnlockProfile() -> bool;

public:
    struct UnlockScreenOrientation_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "unlockScreenOrientation";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto UnlockScreenOrientation() -> void;

public:
    struct UnregisterSurfaceTextureFrameListener_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "unregisterSurfaceTextureFrameListener";
        static constexpr char signature[] =
                "(Ljava/lang/Object;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto UnregisterSurfaceTextureFrameListener(mozilla::jni::Object::Param) -> void;

public:
    struct Vibrate1_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int64_t> Args;
        static constexpr char name[] = "vibrate";
        static constexpr char signature[] =
                "(J)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto Vibrate1(int64_t) -> void;

public:
    struct VibrateA_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::LongArray::Param,
                int32_t> Args;
        static constexpr char name[] = "vibrate";
        static constexpr char signature[] =
                "([JI)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto VibrateA(mozilla::jni::LongArray::Param, int32_t) -> void;

};

class GeckoJavaSampler : public mozilla::jni::Class<GeckoJavaSampler>
{
public:
    typedef mozilla::jni::Ref<GeckoJavaSampler> Ref;
    typedef mozilla::jni::LocalRef<GeckoJavaSampler> LocalRef;
    typedef mozilla::jni::GlobalRef<GeckoJavaSampler> GlobalRef;
    typedef const mozilla::jni::Param<GeckoJavaSampler>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/GeckoJavaSampler";

protected:
    GeckoJavaSampler(jobject instance) : Class(instance) {}

public:
    struct GetFrameNameJavaProfilingWrapper_t {
        typedef GeckoJavaSampler Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "getFrameName";
        static constexpr char signature[] =
                "(III)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetFrameNameJavaProfilingWrapper(int32_t, int32_t, int32_t) -> mozilla::jni::String::LocalRef;

public:
    struct GetProfilerTime_t {
        typedef GeckoJavaSampler Owner;
        typedef double ReturnType;
        typedef double SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getProfilerTime";
        static constexpr char signature[] =
                "()D";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetSampleTimeJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef double ReturnType;
        typedef double SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "getSampleTime";
        static constexpr char signature[] =
                "(II)D";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetSampleTimeJavaProfiling(int32_t, int32_t) -> double;

public:
    struct GetThreadNameJavaProfilingWrapper_t {
        typedef GeckoJavaSampler Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                int32_t> Args;
        static constexpr char name[] = "getThreadName";
        static constexpr char signature[] =
                "(I)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetThreadNameJavaProfilingWrapper(int32_t) -> mozilla::jni::String::LocalRef;

public:
    struct PauseJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "pause";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto PauseJavaProfiling() -> void;

public:
    struct StartJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "start";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto StartJavaProfiling(int32_t, int32_t) -> void;

public:
    struct StopJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "stop";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto StopJavaProfiling() -> void;

public:
    struct UnpauseJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "unpause";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto UnpauseJavaProfiling() -> void;

public:
    template<class Impl> class Natives;
};

class GeckoThread : public mozilla::jni::Class<GeckoThread>
{
public:
    typedef mozilla::jni::Ref<GeckoThread> Ref;
    typedef mozilla::jni::LocalRef<GeckoThread> LocalRef;
    typedef mozilla::jni::GlobalRef<GeckoThread> GlobalRef;
    typedef const mozilla::jni::Param<GeckoThread>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/GeckoThread";

protected:
    GeckoThread(jobject instance) : Class(instance) {}

public:
    class State;

public:
    struct PumpMessageLoop_t {
        typedef GeckoThread Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "pumpMessageLoop";
        static constexpr char signature[] =
                "(Landroid/os/Message;)Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto PumpMessageLoop(mozilla::jni::Object::Param) -> bool;

public:
    struct SetState_t {
        typedef GeckoThread Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "setState";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/GeckoThread$State;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto SetState(mozilla::jni::Object::Param) -> void;

public:
    struct SpeculativeConnect_t {
        typedef GeckoThread Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "speculativeConnectNative";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct ClsLoader_t {
        typedef GeckoThread Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "clsLoader";
        static constexpr char signature[] =
                "Ljava/lang/ClassLoader;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ClsLoader() -> mozilla::jni::Object::LocalRef;

public:
    struct MsgQueue_t {
        typedef GeckoThread Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "msgQueue";
        static constexpr char signature[] =
                "Landroid/os/MessageQueue;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto MsgQueue() -> mozilla::jni::Object::LocalRef;

    static auto MsgQueue(mozilla::jni::Object::Param) -> void;

public:
    template<class Impl> class Natives;
};

class GeckoThread::State : public mozilla::jni::Class<State>
{
public:
    typedef mozilla::jni::Ref<State> Ref;
    typedef mozilla::jni::LocalRef<State> LocalRef;
    typedef mozilla::jni::GlobalRef<State> GlobalRef;
    typedef const mozilla::jni::Param<State>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/GeckoThread$State";

protected:
    State(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                int32_t> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(Ljava/lang/String;I)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New(mozilla::jni::String::Param, int32_t) -> State::LocalRef;

public:
    struct Is_t {
        typedef State Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                State::Param> Args;
        static constexpr char name[] = "is";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/GeckoThread$State;)Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Is(State::Param) const -> bool;

public:
    struct IsAtLeast_t {
        typedef State Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                State::Param> Args;
        static constexpr char name[] = "isAtLeast";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/GeckoThread$State;)Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto IsAtLeast(State::Param) const -> bool;

public:
    struct IsAtMost_t {
        typedef State Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                State::Param> Args;
        static constexpr char name[] = "isAtMost";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/GeckoThread$State;)Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto IsAtMost(State::Param) const -> bool;

public:
    struct IsBetween_t {
        typedef State Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                State::Param,
                State::Param> Args;
        static constexpr char name[] = "isBetween";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/GeckoThread$State;Lorg/mozilla/gecko/GeckoThread$State;)Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto IsBetween(State::Param, State::Param) const -> bool;

public:
    struct ValueOf_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "valueOf";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ValueOf(mozilla::jni::String::Param) -> State::LocalRef;

public:
    struct Values_t {
        typedef State Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "values";
        static constexpr char signature[] =
                "()[Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto Values() -> mozilla::jni::ObjectArray::LocalRef;

public:
    struct EXITED_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "EXITED";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto EXITED() -> State::LocalRef;

public:
    struct EXITING_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "EXITING";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto EXITING() -> State::LocalRef;

public:
    struct INITIAL_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "INITIAL";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto INITIAL() -> State::LocalRef;

public:
    struct JNI_READY_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "JNI_READY";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto JNI_READY() -> State::LocalRef;

public:
    struct LAUNCHED_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "LAUNCHED";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto LAUNCHED() -> State::LocalRef;

public:
    struct LIBS_READY_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "LIBS_READY";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto LIBS_READY() -> State::LocalRef;

public:
    struct MOZGLUE_READY_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "MOZGLUE_READY";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto MOZGLUE_READY() -> State::LocalRef;

public:
    struct PROFILE_READY_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "PROFILE_READY";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto PROFILE_READY() -> State::LocalRef;

public:
    struct RUNNING_t {
        typedef State Owner;
        typedef State::LocalRef ReturnType;
        typedef State::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "RUNNING";
        static constexpr char signature[] =
                "Lorg/mozilla/gecko/GeckoThread$State;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto RUNNING() -> State::LocalRef;

};

class RestrictedProfiles : public mozilla::jni::Class<RestrictedProfiles>
{
public:
    typedef mozilla::jni::Ref<RestrictedProfiles> Ref;
    typedef mozilla::jni::LocalRef<RestrictedProfiles> LocalRef;
    typedef mozilla::jni::GlobalRef<RestrictedProfiles> GlobalRef;
    typedef const mozilla::jni::Param<RestrictedProfiles>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/RestrictedProfiles";

protected:
    RestrictedProfiles(jobject instance) : Class(instance) {}

public:
    struct IsAllowed_t {
        typedef RestrictedProfiles Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "isAllowed";
        static constexpr char signature[] =
                "(ILjava/lang/String;)Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto IsAllowed(int32_t, mozilla::jni::String::Param) -> bool;

public:
    struct IsUserRestricted_t {
        typedef RestrictedProfiles Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "isUserRestricted";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto IsUserRestricted() -> bool;

};

class SurfaceBits : public mozilla::jni::Class<SurfaceBits>
{
public:
    typedef mozilla::jni::Ref<SurfaceBits> Ref;
    typedef mozilla::jni::LocalRef<SurfaceBits> LocalRef;
    typedef mozilla::jni::GlobalRef<SurfaceBits> GlobalRef;
    typedef const mozilla::jni::Param<SurfaceBits>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/SurfaceBits";

protected:
    SurfaceBits(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef SurfaceBits Owner;
        typedef SurfaceBits::LocalRef ReturnType;
        typedef SurfaceBits::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New() -> SurfaceBits::LocalRef;

public:
    struct Buffer_t {
        typedef SurfaceBits Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "buffer";
        static constexpr char signature[] =
                "Ljava/nio/ByteBuffer;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Buffer() const -> mozilla::jni::Object::LocalRef;

    auto Buffer(mozilla::jni::Object::Param) const -> void;

public:
    struct Format_t {
        typedef SurfaceBits Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "format";
        static constexpr char signature[] =
                "I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Format() const -> int32_t;

    auto Format(int32_t) const -> void;

public:
    struct Height_t {
        typedef SurfaceBits Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "height";
        static constexpr char signature[] =
                "I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Height() const -> int32_t;

    auto Height(int32_t) const -> void;

public:
    struct Width_t {
        typedef SurfaceBits Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "width";
        static constexpr char signature[] =
                "I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Width() const -> int32_t;

    auto Width(int32_t) const -> void;

};

class ThumbnailHelper : public mozilla::jni::Class<ThumbnailHelper>
{
public:
    typedef mozilla::jni::Ref<ThumbnailHelper> Ref;
    typedef mozilla::jni::LocalRef<ThumbnailHelper> LocalRef;
    typedef mozilla::jni::GlobalRef<ThumbnailHelper> GlobalRef;
    typedef const mozilla::jni::Param<ThumbnailHelper>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/ThumbnailHelper";

protected:
    ThumbnailHelper(jobject instance) : Class(instance) {}

public:
    struct SendThumbnail_t {
        typedef ThumbnailHelper Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param,
                int32_t,
                bool,
                bool> Args;
        static constexpr char name[] = "notifyThumbnail";
        static constexpr char signature[] =
                "(Ljava/nio/ByteBuffer;IZZ)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto SendThumbnail(mozilla::jni::Object::Param, int32_t, bool, bool) -> void;

};

class DisplayPortMetrics : public mozilla::jni::Class<DisplayPortMetrics>
{
public:
    typedef mozilla::jni::Ref<DisplayPortMetrics> Ref;
    typedef mozilla::jni::LocalRef<DisplayPortMetrics> LocalRef;
    typedef mozilla::jni::GlobalRef<DisplayPortMetrics> GlobalRef;
    typedef const mozilla::jni::Param<DisplayPortMetrics>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/DisplayPortMetrics";

protected:
    DisplayPortMetrics(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef DisplayPortMetrics Owner;
        typedef DisplayPortMetrics::LocalRef ReturnType;
        typedef DisplayPortMetrics::Param SetterType;
        typedef mozilla::jni::Args<
                float,
                float,
                float,
                float,
                float> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(FFFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New(float, float, float, float, float) -> DisplayPortMetrics::LocalRef;

public:
    struct MPosition_t {
        typedef DisplayPortMetrics Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "mPosition";
        static constexpr char signature[] =
                "Landroid/graphics/RectF;";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto MPosition() const -> mozilla::jni::Object::LocalRef;

public:
    struct Resolution_t {
        typedef DisplayPortMetrics Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "resolution";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Resolution() const -> float;

};

class GLController : public mozilla::jni::Class<GLController>
{
public:
    typedef mozilla::jni::Ref<GLController> Ref;
    typedef mozilla::jni::LocalRef<GLController> LocalRef;
    typedef mozilla::jni::GlobalRef<GLController> GlobalRef;
    typedef const mozilla::jni::Param<GLController>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/GLController";

protected:
    GLController(jobject instance) : Class(instance) {}

public:
    struct CreateEGLSurfaceForCompositorWrapper_t {
        typedef GLController Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "createEGLSurfaceForCompositor";
        static constexpr char signature[] =
                "()Ljavax/microedition/khronos/egl/EGLSurface;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto CreateEGLSurfaceForCompositorWrapper() const -> mozilla::jni::Object::LocalRef;

};

class GeckoLayerClient : public mozilla::jni::Class<GeckoLayerClient>
{
public:
    typedef mozilla::jni::Ref<GeckoLayerClient> Ref;
    typedef mozilla::jni::LocalRef<GeckoLayerClient> LocalRef;
    typedef mozilla::jni::GlobalRef<GeckoLayerClient> GlobalRef;
    typedef const mozilla::jni::Param<GeckoLayerClient>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/GeckoLayerClient";

protected:
    GeckoLayerClient(jobject instance) : Class(instance) {}

public:
    struct ActivateProgram_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "activateProgram";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto ActivateProgram() const -> void;

public:
    struct ContentDocumentChanged_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "contentDocumentChanged";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto ContentDocumentChanged() const -> void;

public:
    struct CreateFrame_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "createFrame";
        static constexpr char signature[] =
                "()Lorg/mozilla/gecko/gfx/LayerRenderer$Frame;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto CreateFrame() const -> mozilla::jni::Object::LocalRef;

public:
    struct DeactivateProgramAndRestoreState_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                bool,
                int32_t,
                int32_t,
                int32_t,
                int32_t> Args;
        static constexpr char name[] = "deactivateProgramAndRestoreState";
        static constexpr char signature[] =
                "(ZIIII)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto DeactivateProgramAndRestoreState(bool, int32_t, int32_t, int32_t, int32_t) const -> void;

public:
    struct GetDisplayPort_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<
                bool,
                bool,
                int32_t,
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "getDisplayPort";
        static constexpr char signature[] =
                "(ZZILorg/mozilla/gecko/gfx/ImmutableViewportMetrics;)Lorg/mozilla/gecko/gfx/DisplayPortMetrics;";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto GetDisplayPort(bool, bool, int32_t, mozilla::jni::Object::Param) const -> mozilla::jni::Object::LocalRef;

public:
    struct IsContentDocumentDisplayed_t {
        typedef GeckoLayerClient Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "isContentDocumentDisplayed";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto IsContentDocumentDisplayed() const -> bool;

public:
    struct ProgressiveUpdateCallback_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<
                bool,
                float,
                float,
                float,
                float,
                float,
                bool> Args;
        static constexpr char name[] = "progressiveUpdateCallback";
        static constexpr char signature[] =
                "(ZFFFFFZ)Lorg/mozilla/gecko/gfx/ProgressiveUpdateData;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto ProgressiveUpdateCallback(bool, float, float, float, float, float, bool) const -> mozilla::jni::Object::LocalRef;

public:
    struct SetFirstPaintViewport_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                float,
                float,
                float,
                float,
                float,
                float,
                float> Args;
        static constexpr char name[] = "setFirstPaintViewport";
        static constexpr char signature[] =
                "(FFFFFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto SetFirstPaintViewport(float, float, float, float, float, float, float) const -> void;

public:
    struct SetPageRect_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                float,
                float,
                float,
                float> Args;
        static constexpr char name[] = "setPageRect";
        static constexpr char signature[] =
                "(FFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto SetPageRect(float, float, float, float) const -> void;

public:
    struct SyncFrameMetrics_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<
                float,
                float,
                float,
                float,
                float,
                float,
                float,
                int32_t,
                int32_t,
                int32_t,
                int32_t,
                float,
                bool,
                int32_t> Args;
        static constexpr char name[] = "syncFrameMetrics";
        static constexpr char signature[] =
                "(FFFFFFFIIIIFZI)Lorg/mozilla/gecko/gfx/ViewTransform;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto SyncFrameMetrics(float, float, float, float, float, float, float, int32_t, int32_t, int32_t, int32_t, float, bool, int32_t) const -> mozilla::jni::Object::LocalRef;

public:
    struct SyncViewportInfo_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<
                int32_t,
                int32_t,
                int32_t,
                int32_t,
                float,
                bool,
                int32_t> Args;
        static constexpr char name[] = "syncViewportInfo";
        static constexpr char signature[] =
                "(IIIIFZI)Lorg/mozilla/gecko/gfx/ViewTransform;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto SyncViewportInfo(int32_t, int32_t, int32_t, int32_t, float, bool, int32_t) const -> mozilla::jni::Object::LocalRef;

};

class ImmutableViewportMetrics : public mozilla::jni::Class<ImmutableViewportMetrics>
{
public:
    typedef mozilla::jni::Ref<ImmutableViewportMetrics> Ref;
    typedef mozilla::jni::LocalRef<ImmutableViewportMetrics> LocalRef;
    typedef mozilla::jni::GlobalRef<ImmutableViewportMetrics> GlobalRef;
    typedef const mozilla::jni::Param<ImmutableViewportMetrics>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/ImmutableViewportMetrics";

protected:
    ImmutableViewportMetrics(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef ImmutableViewportMetrics Owner;
        typedef ImmutableViewportMetrics::LocalRef ReturnType;
        typedef ImmutableViewportMetrics::Param SetterType;
        typedef mozilla::jni::Args<
                float,
                float,
                float,
                float,
                float,
                float,
                float,
                float,
                float,
                float,
                int32_t,
                int32_t,
                float> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(FFFFFFFFFFIIF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New(float, float, float, float, float, float, float, float, float, float, int32_t, int32_t, float) -> ImmutableViewportMetrics::LocalRef;

};

class LayerView : public mozilla::jni::Class<LayerView>
{
public:
    typedef mozilla::jni::Ref<LayerView> Ref;
    typedef mozilla::jni::LocalRef<LayerView> LocalRef;
    typedef mozilla::jni::GlobalRef<LayerView> GlobalRef;
    typedef const mozilla::jni::Param<LayerView>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/LayerView";

protected:
    LayerView(jobject instance) : Class(instance) {}

public:
    struct RegisterCompositorWrapper_t {
        typedef LayerView Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "registerCxxCompositor";
        static constexpr char signature[] =
                "()Lorg/mozilla/gecko/gfx/GLController;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto RegisterCompositorWrapper() -> mozilla::jni::Object::LocalRef;

public:
    struct updateZoomedView_t {
        typedef LayerView Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "updateZoomedView";
        static constexpr char signature[] =
                "(Ljava/nio/ByteBuffer;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto updateZoomedView(mozilla::jni::Object::Param) -> void;

};

class NativePanZoomController : public mozilla::jni::Class<NativePanZoomController>
{
public:
    typedef mozilla::jni::Ref<NativePanZoomController> Ref;
    typedef mozilla::jni::LocalRef<NativePanZoomController> LocalRef;
    typedef mozilla::jni::GlobalRef<NativePanZoomController> GlobalRef;
    typedef const mozilla::jni::Param<NativePanZoomController>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/NativePanZoomController";

protected:
    NativePanZoomController(jobject instance) : Class(instance) {}

public:
    struct RequestContentRepaintWrapper_t {
        typedef NativePanZoomController Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                float,
                float,
                float,
                float,
                float> Args;
        static constexpr char name[] = "requestContentRepaint";
        static constexpr char signature[] =
                "(FFFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto RequestContentRepaintWrapper(float, float, float, float, float) const -> void;

};

class ProgressiveUpdateData : public mozilla::jni::Class<ProgressiveUpdateData>
{
public:
    typedef mozilla::jni::Ref<ProgressiveUpdateData> Ref;
    typedef mozilla::jni::LocalRef<ProgressiveUpdateData> LocalRef;
    typedef mozilla::jni::GlobalRef<ProgressiveUpdateData> GlobalRef;
    typedef const mozilla::jni::Param<ProgressiveUpdateData>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/ProgressiveUpdateData";

protected:
    ProgressiveUpdateData(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef ProgressiveUpdateData Owner;
        typedef ProgressiveUpdateData::LocalRef ReturnType;
        typedef ProgressiveUpdateData::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New() -> ProgressiveUpdateData::LocalRef;

public:
    struct SetViewport_t {
        typedef ProgressiveUpdateData Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "setViewport";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/gfx/ImmutableViewportMetrics;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto SetViewport(mozilla::jni::Object::Param) const -> void;

public:
    struct Abort_t {
        typedef ProgressiveUpdateData Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "abort";
        static constexpr char signature[] =
                "Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Abort() const -> bool;

    auto Abort(bool) const -> void;

public:
    struct Scale_t {
        typedef ProgressiveUpdateData Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "scale";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Scale() const -> float;

    auto Scale(float) const -> void;

public:
    struct X_t {
        typedef ProgressiveUpdateData Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "x";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto X() const -> float;

    auto X(float) const -> void;

public:
    struct Y_t {
        typedef ProgressiveUpdateData Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "y";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Y() const -> float;

    auto Y(float) const -> void;

};

class ViewTransform : public mozilla::jni::Class<ViewTransform>
{
public:
    typedef mozilla::jni::Ref<ViewTransform> Ref;
    typedef mozilla::jni::LocalRef<ViewTransform> LocalRef;
    typedef mozilla::jni::GlobalRef<ViewTransform> GlobalRef;
    typedef const mozilla::jni::Param<ViewTransform>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/ViewTransform";

protected:
    ViewTransform(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef ViewTransform Owner;
        typedef ViewTransform::LocalRef ReturnType;
        typedef ViewTransform::Param SetterType;
        typedef mozilla::jni::Args<
                float,
                float,
                float> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(FFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New(float, float, float) -> ViewTransform::LocalRef;

public:
    struct FixedLayerMarginBottom_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "fixedLayerMarginBottom";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto FixedLayerMarginBottom() const -> float;

    auto FixedLayerMarginBottom(float) const -> void;

public:
    struct FixedLayerMarginLeft_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "fixedLayerMarginLeft";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto FixedLayerMarginLeft() const -> float;

    auto FixedLayerMarginLeft(float) const -> void;

public:
    struct FixedLayerMarginRight_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "fixedLayerMarginRight";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto FixedLayerMarginRight() const -> float;

    auto FixedLayerMarginRight(float) const -> void;

public:
    struct FixedLayerMarginTop_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "fixedLayerMarginTop";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto FixedLayerMarginTop() const -> float;

    auto FixedLayerMarginTop(float) const -> void;

public:
    struct Height_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "height";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Height() const -> float;

    auto Height(float) const -> void;

public:
    struct Scale_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "scale";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Scale() const -> float;

    auto Scale(float) const -> void;

public:
    struct Width_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "width";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Width() const -> float;

    auto Width(float) const -> void;

public:
    struct X_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "x";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto X() const -> float;

    auto X(float) const -> void;

public:
    struct Y_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "y";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto Y() const -> float;

    auto Y(float) const -> void;

};

class MatrixBlobCursor : public mozilla::jni::Class<MatrixBlobCursor>
{
public:
    typedef mozilla::jni::Ref<MatrixBlobCursor> Ref;
    typedef mozilla::jni::LocalRef<MatrixBlobCursor> LocalRef;
    typedef mozilla::jni::GlobalRef<MatrixBlobCursor> GlobalRef;
    typedef const mozilla::jni::Param<MatrixBlobCursor>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/sqlite/MatrixBlobCursor";

protected:
    MatrixBlobCursor(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef MatrixBlobCursor Owner;
        typedef MatrixBlobCursor::LocalRef ReturnType;
        typedef MatrixBlobCursor::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::ObjectArray::Param> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "([Ljava/lang/String;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New(mozilla::jni::ObjectArray::Param) -> MatrixBlobCursor::LocalRef;

public:
    struct New2_t {
        typedef MatrixBlobCursor Owner;
        typedef MatrixBlobCursor::LocalRef ReturnType;
        typedef MatrixBlobCursor::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::ObjectArray::Param,
                int32_t> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "([Ljava/lang/String;I)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New(mozilla::jni::ObjectArray::Param, int32_t) -> MatrixBlobCursor::LocalRef;

public:
    struct AddRow_t {
        typedef MatrixBlobCursor Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "addRow";
        static constexpr char signature[] =
                "(Ljava/lang/Iterable;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto AddRow(mozilla::jni::Object::Param) const -> void;

public:
    struct AddRow2_t {
        typedef MatrixBlobCursor Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::Object::Param,
                int32_t> Args;
        static constexpr char name[] = "addRow";
        static constexpr char signature[] =
                "(Ljava/util/ArrayList;I)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto AddRow(mozilla::jni::Object::Param, int32_t) const -> void;

public:
    struct AddRow3_t {
        typedef MatrixBlobCursor Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::ObjectArray::Param> Args;
        static constexpr char name[] = "addRow";
        static constexpr char signature[] =
                "([Ljava/lang/Object;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto AddRow(mozilla::jni::ObjectArray::Param) const -> void;

};

class SQLiteBridgeException : public mozilla::jni::Class<SQLiteBridgeException>
{
public:
    typedef mozilla::jni::Ref<SQLiteBridgeException> Ref;
    typedef mozilla::jni::LocalRef<SQLiteBridgeException> LocalRef;
    typedef mozilla::jni::GlobalRef<SQLiteBridgeException> GlobalRef;
    typedef const mozilla::jni::Param<SQLiteBridgeException>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/sqlite/SQLiteBridgeException";

protected:
    SQLiteBridgeException(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef SQLiteBridgeException Owner;
        typedef SQLiteBridgeException::LocalRef ReturnType;
        typedef SQLiteBridgeException::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New() -> SQLiteBridgeException::LocalRef;

public:
    struct New2_t {
        typedef SQLiteBridgeException Owner;
        typedef SQLiteBridgeException::LocalRef ReturnType;
        typedef SQLiteBridgeException::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New(mozilla::jni::String::Param) -> SQLiteBridgeException::LocalRef;

public:
    struct SerialVersionUID_t {
        typedef SQLiteBridgeException Owner;
        typedef int64_t ReturnType;
        typedef int64_t SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "serialVersionUID";
        static constexpr char signature[] =
                "J";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto SerialVersionUID() -> int64_t;

};

class Clipboard : public mozilla::jni::Class<Clipboard>
{
public:
    typedef mozilla::jni::Ref<Clipboard> Ref;
    typedef mozilla::jni::LocalRef<Clipboard> LocalRef;
    typedef mozilla::jni::GlobalRef<Clipboard> GlobalRef;
    typedef const mozilla::jni::Param<Clipboard>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/util/Clipboard";

protected:
    Clipboard(jobject instance) : Class(instance) {}

public:
    struct ClearText_t {
        typedef Clipboard Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "clearText";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto ClearText() -> void;

public:
    struct GetClipboardTextWrapper_t {
        typedef Clipboard Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "getText";
        static constexpr char signature[] =
                "()Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto GetClipboardTextWrapper() -> mozilla::jni::String::LocalRef;

public:
    struct HasText_t {
        typedef Clipboard Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "hasText";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto HasText() -> bool;

public:
    struct SetClipboardText_t {
        typedef Clipboard Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "setText";
        static constexpr char signature[] =
                "(Ljava/lang/CharSequence;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto SetClipboardText(mozilla::jni::String::Param) -> void;

};

class NativeJSContainer : public mozilla::jni::Class<NativeJSContainer>
{
public:
    typedef mozilla::jni::Ref<NativeJSContainer> Ref;
    typedef mozilla::jni::LocalRef<NativeJSContainer> LocalRef;
    typedef mozilla::jni::GlobalRef<NativeJSContainer> GlobalRef;
    typedef const mozilla::jni::Param<NativeJSContainer>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/util/NativeJSContainer";

protected:
    NativeJSContainer(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef NativeJSContainer Owner;
        typedef NativeJSContainer::LocalRef ReturnType;
        typedef NativeJSContainer::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New() -> NativeJSContainer::LocalRef;

public:
    struct Clone2_t {
        typedef NativeJSContainer Owner;
        typedef NativeJSContainer::LocalRef ReturnType;
        typedef NativeJSContainer::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "clone";
        static constexpr char signature[] =
                "()Lorg/mozilla/gecko/util/NativeJSContainer;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct DisposeNative_t {
        typedef NativeJSContainer Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "disposeNative";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    template<class Impl> class Natives;
};

class NativeJSObject : public mozilla::jni::Class<NativeJSObject>
{
public:
    typedef mozilla::jni::Ref<NativeJSObject> Ref;
    typedef mozilla::jni::LocalRef<NativeJSObject> LocalRef;
    typedef mozilla::jni::GlobalRef<NativeJSObject> GlobalRef;
    typedef const mozilla::jni::Param<NativeJSObject>& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/util/NativeJSObject";

protected:
    NativeJSObject(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef NativeJSObject Owner;
        typedef NativeJSObject::LocalRef ReturnType;
        typedef NativeJSObject::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    static auto New() -> NativeJSObject::LocalRef;

public:
    struct DisposeNative_t {
        typedef NativeJSObject Owner;
        typedef void ReturnType;
        typedef void SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "disposeNative";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

    auto DisposeNative() const -> void;

public:
    struct GetBoolean_t {
        typedef NativeJSObject Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getBoolean";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetBooleanArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::BooleanArray::LocalRef ReturnType;
        typedef mozilla::jni::BooleanArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getBooleanArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;)[Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetBundle_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getBundle";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Landroid/os/Bundle;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetBundleArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getBundleArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;)[Landroid/os/Bundle;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetDouble_t {
        typedef NativeJSObject Owner;
        typedef double ReturnType;
        typedef double SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getDouble";
        static constexpr char signature[] =
                "(Ljava/lang/String;)D";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetDoubleArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::DoubleArray::LocalRef ReturnType;
        typedef mozilla::jni::DoubleArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getDoubleArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;)[D";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetInt_t {
        typedef NativeJSObject Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getInt";
        static constexpr char signature[] =
                "(Ljava/lang/String;)I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetIntArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::IntArray::LocalRef ReturnType;
        typedef mozilla::jni::IntArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getIntArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;)[I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetObject_t {
        typedef NativeJSObject Owner;
        typedef NativeJSObject::LocalRef ReturnType;
        typedef NativeJSObject::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getObject";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Lorg/mozilla/gecko/util/NativeJSObject;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetObjectArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getObjectArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;)[Lorg/mozilla/gecko/util/NativeJSObject;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetString_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getString";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/lang/String;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct GetStringArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "getStringArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;)[Ljava/lang/String;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct Has_t {
        typedef NativeJSObject Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "has";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptBoolean_t {
        typedef NativeJSObject Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                bool> Args;
        static constexpr char name[] = "optBoolean";
        static constexpr char signature[] =
                "(Ljava/lang/String;Z)Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptBooleanArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::BooleanArray::LocalRef ReturnType;
        typedef mozilla::jni::BooleanArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::BooleanArray::Param> Args;
        static constexpr char name[] = "optBooleanArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;[Z)[Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptBundle_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::Object::Param> Args;
        static constexpr char name[] = "optBundle";
        static constexpr char signature[] =
                "(Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptBundleArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::ObjectArray::Param> Args;
        static constexpr char name[] = "optBundleArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;[Landroid/os/Bundle;)[Landroid/os/Bundle;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptDouble_t {
        typedef NativeJSObject Owner;
        typedef double ReturnType;
        typedef double SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                double> Args;
        static constexpr char name[] = "optDouble";
        static constexpr char signature[] =
                "(Ljava/lang/String;D)D";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptDoubleArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::DoubleArray::LocalRef ReturnType;
        typedef mozilla::jni::DoubleArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::DoubleArray::Param> Args;
        static constexpr char name[] = "optDoubleArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;[D)[D";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptInt_t {
        typedef NativeJSObject Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                int32_t> Args;
        static constexpr char name[] = "optInt";
        static constexpr char signature[] =
                "(Ljava/lang/String;I)I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptIntArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::IntArray::LocalRef ReturnType;
        typedef mozilla::jni::IntArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::IntArray::Param> Args;
        static constexpr char name[] = "optIntArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;[I)[I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptObject_t {
        typedef NativeJSObject Owner;
        typedef NativeJSObject::LocalRef ReturnType;
        typedef NativeJSObject::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                NativeJSObject::Param> Args;
        static constexpr char name[] = "optObject";
        static constexpr char signature[] =
                "(Ljava/lang/String;Lorg/mozilla/gecko/util/NativeJSObject;)Lorg/mozilla/gecko/util/NativeJSObject;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptObjectArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::ObjectArray::Param> Args;
        static constexpr char name[] = "optObjectArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;[Lorg/mozilla/gecko/util/NativeJSObject;)[Lorg/mozilla/gecko/util/NativeJSObject;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptString_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::String::Param> Args;
        static constexpr char name[] = "optString";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct OptStringArray_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        typedef mozilla::jni::Args<
                mozilla::jni::String::Param,
                mozilla::jni::ObjectArray::Param> Args;
        static constexpr char name[] = "optStringArray";
        static constexpr char signature[] =
                "(Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct ToBundle_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "toBundle";
        static constexpr char signature[] =
                "()Landroid/os/Bundle;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    struct ToString_t {
        typedef NativeJSObject Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        typedef mozilla::jni::Args<> Args;
        static constexpr char name[] = "toString";
        static constexpr char signature[] =
                "()Ljava/lang/String;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode =
                mozilla::jni::ExceptionMode::ABORT;
    };

public:
    template<class Impl> class Natives;
};

} /* widget */
} /* mozilla */
#endif // GeneratedJNIWrappers_h
