/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIURI;

webidl DocumentFragment;
webidl Element;

/**
 * This interface is OBSOLETE and exists solely for legacy extensions.
 */
[scriptable, uuid(3ab244a9-f09d-44da-9e3f-ee4d67367f2d)]
interface nsIScriptableUnescapeHTML : nsISupports 
{
  /** 
   * Converts HTML to plain text. This is equivalent to calling
   * nsIParserUtils::convertToPlainText(src, 
   *   nsIDocumentEncoder::OutputSelectionOnly |
   *   nsIDocumentEncoder::OutputAbsoluteLinks, 0).
   *
   * You should call nsIParserUtils::convertToPlainText() instead of calling 
   * this method.
   *
   * @param src The HTML string to convert to plain text.
   */ 
  AString unescape(in AString src);
        
  /**
   * Parses markup into a sanitized document fragment. This is equivalent to
   * calling nsIParserUtils::parseFragment(fragment, 0, isXML, baseURI,
   * element).
   *
   * You should call nsIParserUtils::parseFragment() instead of calling this 
   * method.
   * @param fragment the input markup
   * @param isXML true if |fragment| is XML and false if HTML
   * @param baseURI the base URL for this fragment
   * @param element the context node for the fragment parsing algorithm
   */
  DocumentFragment parseFragment(in AString fragment,
                                 in boolean isXML,
                                 in nsIURI baseURI,
                                 in Element element);
};

%{ C++
#define NS_SCRIPTABLEUNESCAPEHTML_CONTRACTID \
  "@mozilla.org/feed-unescapehtml;1"
#define NS_SCRIPTABLEUNESCAPEHTML_CID  \
{ 0x10f2f5f0, 0xf103, 0x4901, { 0x98, 0x0f, 0xba, 0x11, 0xbd, 0x70, 0xd6, 0x0d} }
%}
