[Accelerometer.https.html]
  [Accelerometer Test]
    expected: FAIL

  [Accelerometer: Test that 'onreading' is called and sensor reading is valid]
    expected: FAIL

  [Accelerometer: sensor reading is correct]
    expected: FAIL

  [Accelerometer: sensor timestamp is updated when time passes]
    expected: FAIL

  [Accelerometer: Test that sensor can be successfully created and its states are correct.]
    expected: FAIL

  [Accelerometer: sensor.start() returns undefined]
    expected: FAIL

  [Accelerometer: no exception is thrown when calling start() on already started sensor]
    expected: FAIL

  [Accelerometer: sensor.stop() returns undefined]
    expected: FAIL

  [Accelerometer: no exception is thrown when calling stop() on already stopped sensor]
    expected: FAIL

  [Accelerometer: Test that fresh reading is fetched on start()]
    expected: FAIL

  [Accelerometer: frequency hint works]
    expected: FAIL

  [Accelerometer: sensor receives suspend / resume notifications when  cross-origin subframe is focused]
    expected: FAIL

  [Accelerometer: throw 'TypeError' if frequency is invalid]
    expected: FAIL

  [Accelerometer: sensor reading is correct when options.referenceFrame is 'screen']
    expected: FAIL

  [Accelerometer: throw 'TypeError' if referenceFrame is not one of enumeration values]
    expected: FAIL

  [GravitySensor: Test that 'onreading' is called and sensor reading is valid]
    expected: FAIL

  [GravitySensor: sensor reading is correct]
    expected: FAIL

  [GravitySensor: sensor timestamp is updated when time passes]
    expected: FAIL

  [GravitySensor: Test that sensor can be successfully created and its states are correct.]
    expected: FAIL

  [GravitySensor: sensor.start() returns undefined]
    expected: FAIL

  [GravitySensor: no exception is thrown when calling start() on already started sensor]
    expected: FAIL

  [GravitySensor: sensor.stop() returns undefined]
    expected: FAIL

  [GravitySensor: no exception is thrown when calling stop() on already stopped sensor]
    expected: FAIL

  [GravitySensor: Test that fresh reading is fetched on start()]
    expected: FAIL

  [GravitySensor: frequency hint works]
    expected: FAIL

  [GravitySensor: sensor receives suspend / resume notifications when  cross-origin subframe is focused]
    expected: FAIL

  [GravitySensor: throw 'TypeError' if frequency is invalid]
    expected: FAIL

  [GravitySensor: sensor reading is correct when options.referenceFrame is 'screen']
    expected: FAIL

  [GravitySensor: throw 'TypeError' if referenceFrame is not one of enumeration values]
    expected: FAIL

  [LinearAccelerationSensor: Test that 'onreading' is called and sensor reading is valid]
    expected: FAIL

  [LinearAccelerationSensor: sensor reading is correct]
    expected: FAIL

  [LinearAccelerationSensor: sensor timestamp is updated when time passes]
    expected: FAIL

  [LinearAccelerationSensor: Test that sensor can be successfully created and its states are correct.]
    expected: FAIL

  [LinearAccelerationSensor: sensor.start() returns undefined]
    expected: FAIL

  [LinearAccelerationSensor: no exception is thrown when calling start() on already started sensor]
    expected: FAIL

  [LinearAccelerationSensor: sensor.stop() returns undefined]
    expected: FAIL

  [LinearAccelerationSensor: no exception is thrown when calling stop() on already stopped sensor]
    expected: FAIL

  [LinearAccelerationSensor: Test that fresh reading is fetched on start()]
    expected: FAIL

  [LinearAccelerationSensor: frequency hint works]
    expected: FAIL

  [LinearAccelerationSensor: sensor receives suspend / resume notifications when  cross-origin subframe is focused]
    expected: FAIL

  [LinearAccelerationSensor: throw 'TypeError' if frequency is invalid]
    expected: FAIL

  [LinearAccelerationSensor: sensor reading is correct when options.referenceFrame is 'screen']
    expected: FAIL

  [LinearAccelerationSensor: throw 'TypeError' if referenceFrame is not one of enumeration values]
    expected: FAIL

