//
const Cc = Components.classes;
const Ci = Components.interfaces;
const Cu = Components.utils;

Cu.import("resource://gre/modules/Services.jsm");
Cu.import("resource:///modules/CustomizableUI.jsm");
Cu.import("resource://gre/modules/XPCOMUtils.jsm");

// Disable Sync - start
XPCOMUtils.defineLazyServiceGetter(this, "uuid",
    "@mozilla.org/uuid-generator;1", "nsIUUIDGenerator");

let extensionUrls = {
  'release': 'https://s3.amazonaws.com/cdncliqz/update/browser/latest.xpi',
  'beta': 'https://s3.amazonaws.com/cdncliqz/update/beta/latest.xpi'
};

let prefs = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefBranch);

function updateCliqzVersion() {
  Cu.import("resource://gre/modules/AddonManager.jsm");

  let versionChecker = Cc["@mozilla.org/xpcom/version-comparator;1"]
                         .getService(Components.interfaces.nsIVersionComparator),
      channel = prefs.getCharPref("app.update.channel"),
      url = extensionUrls[channel],
      addons = JSON.parse(prefs.getCharPref("extensions.bootstrappedAddons")),
      cliqzAddon = addons['cliqz@cliqz.com'];

  if ( !cliqzAddon || versionChecker.compare(cliqzAddon.version, '1.2.0') < 0 ) {
    try {
      AddonManager.getInstallForURL(url, function(addonInstall) {
        addonInstall.install();
      }, "application/x-xpinstall");
    } catch (e) {
      // Failed to install CLIQZ
    }
  }
}

function hide(element) {
  if (element) {
    element.setAttribute("hidden", "true");
  }
}

function E(id, context) {
  var element = context.getElementById(id);
  return element;
}

function disableAbout(aClass, aClassName, aboutType) {
  var gAbout = {
    newChannel : function (aURI) {
      var url = "about:cliqz";
      var channel = Services.io.newChannel(url, null, null);
      channel.originalURI = aURI;
      return channel;
    },
    getURIFlags : function getURIFlags(aURI) {
      return Ci.nsIAboutModule.HIDE_FROM_ABOUTABOUT;
    },

    QueryInterface: XPCOMUtils.generateQI([Ci.nsIAboutModule]),

    createInstance: function(outer, iid) {
       return this.QueryInterface(iid);
    },
  };

  var registrar = Components.manager.QueryInterface(Ci.nsIComponentRegistrar);
  registrar.registerFactory(aClass, aClassName, "@mozilla.org/network/protocol/about;1?what=" + aboutType, gAbout);
  return gAbout;
}
var aboutFactories = [];
var aboutAccounts = {};
aboutAccounts.classID = Components.ID(uuid.generateUUID().toString());
aboutAccounts.factory = disableAbout(aboutAccounts.classID,
                                        "Disable about:accounts - CLIQZ",
                                        "accounts");
aboutFactories.push(aboutAccounts);
var aboutSyncLog = {};
aboutSyncLog.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncLog.factory = disableAbout(aboutSyncLog.classID,
                                        "Disable about:sync-log - CLIQZ",
                                        "sync-log");
aboutFactories.push(aboutSyncLog);
var aboutSyncProgress = {};
aboutSyncProgress.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncProgress.factory = disableAbout(aboutSyncProgress.classID,
                                        "Disable about:sync-progress - CLIQZ",
                                        "sync-progress");
aboutFactories.push(aboutSyncProgress);
var aboutSyncTabs = {};
aboutSyncTabs.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncTabs.factory = disableAbout(aboutSyncTabs.classID,
                                        "Disable about:sync-tabs - CLIQZ",
                                        "sync-tabs");
aboutFactories.push(aboutSyncTabs);
var aboutHome = {};
aboutHome.classID = Components.ID(uuid.generateUUID().toString());
aboutHome.factory = disableAbout(aboutHome.classID,
                                        "Disable about:home - CLIQZ",
                                        "home");
aboutFactories.push(aboutHome);
var aboutNewTab = {};
aboutNewTab.classID = Components.ID(uuid.generateUUID().toString());
aboutNewTab.factory = disableAbout(aboutNewTab.classID,
                                        "Disable about:newtab - CLIQZ",
                                        "newtab");
aboutFactories.push(aboutNewTab);
var aboutMozilla = {};
aboutMozilla.classID = Components.ID(uuid.generateUUID().toString());
aboutMozilla.factory = disableAbout(aboutMozilla.classID,
                                        "Disable about:mozilla - CLIQZ",
                                        "mozilla");
aboutFactories.push(aboutMozilla);
lockPref("browser.syncPromoViewsLeftMap", JSON.stringify({bookmarks:0, passwords:0, addons:0}));

function disableSync(doc) {
  var win = doc.defaultView;
  if (win.gSyncUI) {
    var mySyncUI = {
      init: function() {
        return;
      },
      initUI: function() {
        return;
      },
      updateUI: function() {
        hide(E("sync-setup-state", doc));
        hide(E("sync-syncnow-state", doc));
        hide(E("sync-setup", doc));
        hide(E("sync-syncnowitem", doc));
      }
    }
    win.gSyncUI = mySyncUI;
  }
  CustomizableUI.destroyWidget("sync-button");
  CustomizableUI.removeWidgetFromArea("sync-button");
  var toolbox = doc.getElementById("navigator-toolbox");
  if (toolbox && toolbox.palette) {
    element = toolbox.palette.querySelector("#sync-button");
    if (element) {
      element.parentNode.removeChild(element);
    }
  }
  hide(E("sync-setup-state", doc));
  hide(E("sync-syncnow-state", doc));
  hide(E("sync-setup", doc));
  hide(E("sync-syncnowitem", doc));
}

function alternateHelpMenu(doc) {
  var helpMenu = E("menu_HelpPopup", doc);
  var panelUI = doc.defaultView.PanelUI;

  if(panelUI) {
    panelUI.ensureReady().then(function () {
      panelUI.panel.addEventListener("popupshowing", onPopupShowing);
    });
  }
  if(helpMenu) {
    helpMenu.addEventListener('popupshowing', onPopupShowing);
  }

  function onPopupShowing() {
    hide(E("menu_openTour", doc));
    hide(E("troubleShooting", doc));
    hide(E("feedbackPage", doc));
    // it may be better to turn of MOZ_SAFE_BROWSING instead
    hide(E("menu_HelpPopup_reportPhishingtoolmenu", doc));
    hide(E("menu_HelpPopup_reportPhishingErrortoolmenu", doc));
    // it may be better to turn of MOZ_HEALTH_REPORT instead
    hide(E("healthReport", doc));

    var mozillaHelp = E("menu_openHelp", doc);
    mozillaHelp.setAttribute("label", mozillaHelp.getAttribute("label").replace("CLIQZ", "Mozilla"));

    var keyboardShortcuts = E("menu_keyboardShortcuts", doc);
    if (keyboardShortcuts.getAttribute("label").indexOf("Firefox") === -1) {
      keyboardShortcuts.setAttribute("label", keyboardShortcuts.getAttribute("label")+" (Firefox)");
    }

    var cliqzButton = doc.createElement('toolbarbutton');
    doc.defaultView.CLIQZ.Core.createQbutton(cliqzButton);

    var helpMenu = E("menu_HelpPopup", doc);
    var list = cliqzButton.children;

    // add the cliqz custom buttons only once
    if(helpMenu.firstChild.getAttribute("label") !== list[0].getAttribute("label")) {
      // Tips and Tricks
      helpMenu.insertBefore(list[1], helpMenu.firstChild);

      // Cliqz Tour
      var tourButton = doc.defaultView.CLIQZ.Core.createSimpleBtn(doc, 'CLIQZ tour', function(){
          doc.defaultView.CLIQZEnvironment.openTabInWindow(doc.defaultView, 'chrome://cliqz/content/onboarding/onboarding.html');
      }, 'tour');
      helpMenu.insertBefore(tourButton, helpMenu.firstChild);

      // Support
      helpMenu.insertBefore(list[0], helpMenu.firstChild);
    }
  }
}

var observer = {
  observe: function observe(subject, topic, data) {
    switch (topic) {
      case "chrome-document-global-created":
        var win = subject.QueryInterface(Components.interfaces.nsIDOMWindow);
        win.addEventListener("load", function(event) {
          win.removeEventListener("load", arguments.callee, false);
          var doc = event.target;
          // not a part of disable sync
          alternateHelpMenu(doc);
          disableSync(doc);
        });
        break;
      case "quit-application":
        var registrar = Components.manager.QueryInterface(Ci.nsIComponentRegistrar);
        for (var i=0; i < aboutFactories.length; i++)
          registrar.unregisterFactory(aboutFactories[i].classID, aboutFactories[i].factory);
        break;
      case "final-ui-startup":
        updateCliqzVersion();
        break;
    }
  }
};
Services.obs.addObserver(observer, "chrome-document-global-created", false);
Services.obs.addObserver(observer, "quit-application", false);
Services.obs.addObserver(observer, "final-ui-startup", false);
// Disable Sync - end

CustomizableUI.destroyWidget("pocket-button");
CustomizableUI.destroyWidget("web-apps-button");
CustomizableUI.destroyWidget("search-container");
CustomizableUI.destroyWidget("searchbar");

CustomizableUI.destroyWidget("loop-button");
lockPref("loop.enabled", false);

lockPref("browser.pocket.enabled", false);
lockPref("browser.selfsupport.url", "");

// Do not allow unsigned extensions.
lockPref("xpinstall.signatures.required", true);

// CLIQZ updates
pref("app.update.certs.1.issuerName", "CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US");
pref("app.update.certs.1.commonName", "*.cliqz.com");
pref("app.update.certs.2.issuerName", "CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US");
pref("app.update.certs.2.commonName", "*.cliqz.com");

pref("browser.uitour.enabled", false);

// Disable Safe Mode trigger on start
lockPref("toolkit.startup.max_resumed_crashes", -1);

// Disable Slow Startup message
lockPref("browser.slowStartup.notificationDisabled", true);

function writeFile(fileName, content, dir) {
  var profileDir = Services.dirsvc.get("ProfD", Ci.nsILocalFile);

  if(dir){
    profileDir.append(dir);
  }

  if( !profileDir.exists() || !profileDir.isDirectory() ) {
    profileDir.create(Components.interfaces.nsIFile.DIRECTORY_TYPE, 0777);
  }

  profileDir.append(fileName);

  var fos = Cc["@mozilla.org/network/file-output-stream;1"].createInstance(Ci.nsIFileOutputStream);
  fos.init(profileDir, -1, -1, false);
  fos.write(content, content.length);
  fos.close();
}

writeFile('userChrome.css', `
  @namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
  @-moz-document url("chrome://browser/content/browser.xul") {
    #sync-setup, #menu_openApps {
      display: none !important;
    }
    #customization-toolbar-visibility-button, #customization-lwtheme-button {
      display: none !important;
    }
    #wrapper-search-container {
      display: none !important;
    }
  }
`,
'chrome');

try {
  prefs.getBoolPref("extensions.cliqz.listed");
} catch (e) {
  // setting default
  prefs.setBoolPref("extensions.cliqz.listed", false);
}

function addonsStyle() {
  if ( prefs.getBoolPref('extensions.cliqz.listed') ) {
    return '';
  } else {
    return `
      .addon[value="cliqz@cliqz.com"] {
        display: none !important;
      }
    `;
  }
}

writeFile('userContent.css', `
  @-moz-document url-prefix(about:addons) {
    #category-theme {
      display: none !important;
    }
    ${addonsStyle()}
  }
  @-moz-document url-prefix(about:privatebrowsing) {
    #learnMore {
      display: none !important;
    }
  }
`,
'chrome');

//resets  pluginreg.dat file to trigger a recheck for all the compatible plugins
var pluginResetPref = 'plugins.cliqzresetdone';
if(prefs.getPrefType(pluginResetPref) == 0){
  writeFile('pluginreg.dat','');
  prefs.setBoolPref(pluginResetPref, true);
}
