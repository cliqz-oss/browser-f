//
const Cc = Components.classes;
const Ci = Components.interfaces;
const Cu = Components.utils;

Cu.import("resource://gre/modules/Services.jsm");
Cu.import("resource:///modules/CustomizableUI.jsm");
Cu.import("resource://gre/modules/XPCOMUtils.jsm");

const prefs = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefBranch);

// Disable Sync
lockPref("browser.syncPromoViewsLeftMap", JSON.stringify({bookmarks:0, passwords:0, addons:0}));

CustomizableUI.destroyWidget("pocket-button");
CustomizableUI.destroyWidget("web-apps-button");
CustomizableUI.destroyWidget("search-container");
CustomizableUI.destroyWidget("searchbar");

CustomizableUI.destroyWidget("loop-button");
lockPref("loop.enabled", false);

lockPref("browser.pocket.enabled", false);
lockPref("browser.selfsupport.url", "");

// Disable Mozilla's tracking protection
lockPref("privacy.trackingprotection.enabled", false);
lockPref("privacy.trackingprotection.pbmode.enabled", false);

// Cliqz updates
pref("app.update.certs.1.issuerName", "CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US");
pref("app.update.certs.1.commonName", "*.cliqz.com");
pref("app.update.certs.2.issuerName", "CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US");
pref("app.update.certs.2.commonName", "*.cliqz.com");

pref("browser.uitour.enabled", false);

// Disable Safe Mode trigger on start
lockPref("toolkit.startup.max_resumed_crashes", -1);

// Disable Slow Startup message
lockPref("browser.slowStartup.notificationDisabled", true);

try {
  prefs.getBoolPref("extensions.cliqz.listed");
} catch (e) {
  // setting default
  prefs.setBoolPref("extensions.cliqz.listed", false);
}

function writeFile(fileName, content, dir) {
  var profileDir = Services.dirsvc.get("ProfD", Ci.nsILocalFile);

  if(dir){
    profileDir.append(dir);
  }

  if( !profileDir.exists() || !profileDir.isDirectory() ) {
    profileDir.create(Components.interfaces.nsIFile.DIRECTORY_TYPE, 0777);
  }

  profileDir.append(fileName);

  var fos = Cc["@mozilla.org/network/file-output-stream;1"].createInstance(Ci.nsIFileOutputStream);
  fos.init(profileDir, -1, -1, false);
  fos.write(content, content.length);
  fos.close();
}

//resets  pluginreg.dat file to trigger a recheck for all the compatible plugins
var pluginResetPref = 'plugins.cliqzresetdone';
if(prefs.getPrefType(pluginResetPref) == 0){
  writeFile('pluginreg.dat','');
  prefs.setBoolPref(pluginResetPref, true);
}
